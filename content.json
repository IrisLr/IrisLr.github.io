[{"title":"重装 Windows 后的 Hexo 博客环境恢复","date":"2017-06-26T07:25:16.000Z","path":"/posts/86195e20/","text":"前言：由于本人换系统较为频繁，这种操作不止一两次了。这次换系统后，觉得重搭环境麻烦，导致很久都没有更博了。搭完后，发现过程并不复杂，于是记录下来，方便下次。。 环境： 本地系统：Win7 1 关联 github安装 Git下载地址 &gt; git config --global user.name &quot;fengyanlover&quot; &gt; git config --global user.email &quot;fengyanlover@gmail.com&quot; 生产新的 SSH Key 配置，在 Git Bash 执行代码： &gt; ssh-keygen -t rsa -C &quot;fengyanlover@gmail.com&quot; 此步会在用户目录下自动生成 id_rsa 和 id_rsa.pub。将 id_rsa.pub 的内容复制到 github 上即可。 2 安装 Hexo进入博客目录，打开 Git Bash安装 Hexo &gt; npm install -g hexo &gt; hexo 基本操作： &gt; hexo g &gt; hexo s &gt; hexo d 参考资料：【１】Windows下使用Hexo+GithubPage搭建博客 作者 @Iris2017 年 6 月 26 日","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://irislr.me/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"http://irislr.me/tags/Blog/"}]},{"title":"CentOS7 上 PPTP VPN 的搭建","date":"2017-06-22T08:18:29.000Z","path":"/posts/79e47cfb/","text":"前言： 我目前的需求：为了方便调试阿里云上的网站，希望能像访问本地磁盘一样访问云服务器上的程序，达到自动同步的效果。首先，利用 VPN 协议能将两台不同局域网的计算机拉到同一个局域网内。其次，局域网内的文件共享方式大体分三种——FTP、NFS、Samba。FTP 不能实现在线修改；NFS 能同步，但只支持 linux 系统之间的挂载；而 Samba 则能实现 windows 与 linux 之间的同步访问。经过各方面的考虑，最终，我选择了 VPN 与 Samba 协议结合的方式。下面将陆续介绍这两个服务器的搭建步骤。VPN 已经是一个老生常谈的东西了，像各大视频网站上的 VIP 的特权，又像通往个人空间的光速隧道，简单，安全。其中，VPN 搭建的过程中最麻烦最容易出问题的步骤是防火墙的设置，需要特别注意。 环境： 云服务器系统：CentOS7本地系统：Win7 1 检测系统环境1.1 是否支持 MPPE 补丁$ modprobe ppp-compress-18 &amp;&amp; echo success 显示 success 说明系统支持 MPPE 补丁，如果不支持，则需要安装 kernel-devel $ sudo yum install kernel-devel 1.2 是否开启 TUN/TAP 支持$ cat /dev/net/tun 显示结果为下面的文本，则表明通过： cat:/dev/net/tun: File descriptor in bad state 1.3 是否开启ppp支持$ cat /dev/ppp 显示结果为下面的文本，则表明通过： cat:/dev/ppp: No such device or address 上面三条必须同时满足，否则不能安装pptp vpn 2 关闭SELINUX$ sudo vim /etc/selinux/config ####################################### # 修改 SELINUX=disabled 使配置立即生效： $ setenforce 0 3 PPTP 的安装和配置3.1 安装$ sudo yum install -y ppp iptables pptpd 3.2 参数配置配置 PPTP 参数 $ sudo vim /etc/ppp/options.pptpd ################################## ms-dns 8.8.8.8 ms-dns 114.114.114.114 设置 PPTP 客户端用户和密码 $ sudo vim /etc/ppp/chap-secrets ################################## #client server secret IP addresses user pptpd pass * 设置 PPTP 服务器和客户端的局域网 IP 地址 $ sudo vim /etc/pptpd.conf ################################## localip 192.168.1.1 # 服务器的局域网 IP 地址 remoteip 192.168.1.2-254 # 客户端的局域网 IP 地址 # 据说这里最后一行需要为空内容.. 修改内核转发参数 $ sudo vim /etc/sysctl.conf ################################## net.ipv4.ip_forward = 1 #设置为1 使设置立刻生效 $ /sbin/sysctl -p 4 启动 PPTP 服务启动pptp $ sudo systemctl start pptpd.service 查看pptp状态 $ sudo systemctl status pptpd.service 设置开机启动 $ sudo systemctl enable pptpd.service 5 修改防火墙规则5.1 关闭默认防火墙启 用 iptables 防火墙关闭 firewall 停止firewall： $ sudo systemctl stop firewalld.service 禁止firewall开机启动： $ sudo systemctl disable firewalld.service 查看默认防火墙状态（关闭后显示 notrunning，开启后显示 running） $ sudo firewall-cmd --state 关闭 iptables 安装 iptables 防火墙： $ sudo yum install -y iptables 启动防火墙： $ sudo systemctl start iptables.service 设置防火墙开机启动： $ sudo systemctl enable iptables.service 5.2 修改防火墙规则文件主要是添加1723端口和gre协议，并添加 nat 转发，配置规则如下： $ sudo vim /etc/sysconfig/iptables ################################## # sample configuration for iptables service # you can edit this manually or use system-config-firewall # please do not ask us to add additional ports/services to this default configuration *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -p tcp -m state --state NEW,RELATED,ESTABLISHED -m tcp --dport 22 -jACCEPT -A INPUT -p tcp -m state --state NEW,RELATED,ESTABLISHED -m tcp --dport 1723 -jACCEPT -A INPUT -p gre -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A FORWARD -i ppp+ -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT -A FORWARD -m state --state INVALID -j DROP -A OUTPUT -m state --state INVALID -j DROP COMMIT *nat :PREROUTING ACCEPT [0:0] :POSTROUTING ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A POSTROUTING -s 192.168.1.1/24 -o eth0 -j MASQUERADE COMMIT 还需将 nat 转发添加到 local 文件中： $ sudo vim /etc/rc.d/rc.local ################################## iptables -t nat -A POSTROUTING -s 192.168.1.1/24 -o eth0 -j MASQUERADE 重启iptables使得规则生效 $ sudo systemctl restart iptables.service 查看路由表及iptables规则 $ iptables -t nat -L $ iptables -t filter -L 加载iptables模块 $ sudo modprobe ip_nat_pptp $ sudo modprobe ip_conntrack_pptp 查看模块是否加载 $ lsmod|grep pptp 6 测试安装net-tools，查看1723端口 $ sudo yum install -y net-tools $ sudo netstat -nap | grep 1723 | grep pptpd win7 连接 VPN 后发现无法上网，解决方法在这里。 参考资料：【１】Centos 7 配置PPTP VPN攻略【２】CentOS 7.0关闭默认防火墙启用iptables防火墙【３】连接VPN后不能上网的解决办法 作者 @Iris2017 年 6 月 22 日","tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://irislr.me/tags/CentOS/"},{"name":"VPN","slug":"VPN","permalink":"http://irislr.me/tags/VPN/"}]},{"title":"树莓派上Node.js和MongoDB的安装","date":"2017-03-22T14:28:16.000Z","path":"/posts/19738ae3/","text":"环境： Raspberry pi：3B+树莓派 OS：RaspbianNode.js：v7.1.0npm：3.10.9mongoDB： 1 安装 Node.js总的来说，Node.js 在 linux 下有四种安装方法。第一种是利用 apt 从源中直接获取安装，但用这种方法获得的版本往往很旧；第二种是下载官网打包好的 deb 安装包，用 dpkg 进行安装，但官网并没有提供树莓派的版本。最接近的有 ubuntu 和 debian 版本，基于 x86_64 ，树莓派需要的是 arm7l ，也只能望而却步。第三种是手动编译 Node.js 官网提供的源码，这种方式虽然麻烦点，但却是获取最新版本的唯一途径。而事实证明，适合的比最新的好用……第四种方法，下载官网已经编译好的包，解压后简单配置下就能用，重要的是版本一定要找对！在树莓派上，上面这四种方法我都一一试过了，从编译源码解决各种依赖，到找 deb 包找到生无可恋，再到已编译包各种版本之间的徘徊不前。所以，笔者要告诉每一个看到这篇博文的你，为了少走弯路，优先尝试第四种方式！废话不多说，下面介绍方法四的步骤：首先，如何选择适合我们系统的版本呢？到这里可以看到所有的版本，令人眼花缭乱。不过没关系，在选择版本的过程中，只需要记住两点，一是系统内核，二是系统发布时间。这两个信息可以通过一条命令获得，如下： $ uname -a 版本选好后，可以选择 wget 下载，也可以先在自己电脑上下载好再传过去。我选择的是后者，因为 IDM 快很多……解压： $ tar -xf node-vX.X.X-linux-armvXl.tar.xz 安装： $ sudo mv node-vX.X.X-linux-armvXl /usr/local/node 最后建个硬链接，和添 path 路径是一个效果： $ cd /usr/local/bin $ sudo ln -s /usr/local/node/bin/node node $ sudo ln -s /usr/local/node/bin/npm npm 测试： $ node -v $ npm -v 成功！ 2 安装 Serialport$ sudo npm install serialport --unsafe-perm --build-from-source 3 安装 MongoDB$ sudo apt-get install mongodb-server -y $ sudo mkdir -p /data/db $ sudo service mongodb start 测试： 4 在 Node.js 中使用 MongoDB 参考资料：【１】Getting a Raspberry Pi ready for NodeBots【２】EmergingTechnologyAdvisors/node-serialport【３】NodeJS + MongoDB Web Server Raspberry Pi Tutorial 作者 @Iris2017 年 3 月 22 日","tags":[{"name":"Raspberry pi","slug":"Raspberry-pi","permalink":"http://irislr.me/tags/Raspberry-pi/"},{"name":"Node.js","slug":"Node-js","permalink":"http://irislr.me/tags/Node-js/"},{"name":"MongoDB","slug":"MongoDB","permalink":"http://irislr.me/tags/MongoDB/"}]},{"title":"浅谈树莓派的初始设置","date":"2017-03-18T06:28:21.000Z","path":"/posts/dd7b0567/","text":"前言：树莓派，一个美丽与神奇并存的小电脑，易学，好玩。可以给爱好者提供日常所需，也可以被 Geek 玩出新科技。怎么说我也算得上半个 Geek 吧，不玩玩树莓派多遗憾……哈哈，现在就开始吧！ 环境： Raspberry pi：3B+树莓派 OS：Raspbian本地系统：Windows 10 1 烧写系统第一步，进官网下载 Raspbian 系统。第二步，安装烧写软件 Win32DiskImager ，然后选择相应的 SD 卡和镜像，点击 write，等上个 10 来分钟即可。第三步，连上显示器，进入系统。第四步，对于 99% 的人，进系统后的第一件事就是连网吧！连无线好说，连设置为 dhcp 的路由器也好说，毕竟 Raspbain 默认就有很好的图形化界面。至于连接需要设置 IP 的有线，我采用的是下面的方法：进入 /etc/network $ cd /etc/network $ sudo nano interfaces --------------------- 添加： address netmask gateway 连好网后，就来装个 vim 吧。原因？—— 熟悉。 2 解锁 root 账户进入系统的默认用户 pi，密码是 raspberry。由于初始系统的 root 用户是被锁定的，如果装完系统后不做这一步，以后出了些什么问题的话解决起来就有点麻烦了。我在这点上还是深有体会的……曾经因为改错了 sudoer 文件，pi 下的 sudo 命令用不了了，由于之前没有解锁 root ，那个时候想解锁也不可能（因为解锁需要 sudo ）。当时想着，这个系统基本是没法用了吧，要重装吗？——别啊，里面装了好多东西呢，一定会有解决方法的……后来，几经周折，把 SD卡通过读卡器在另一个树莓派的系统上改过来的。其实也不一定要是树莓派，只要有个 linux 系统就行，不过我没有。庆幸当时手上还有个树莓派啊。所以，要是提前解锁了 root 不就啥事儿都没有了吗？执行下面的命令设置 root 密码，会提示输入两次： $ sudo passwd root 解锁： $ sudo passwd --unlock root 现在，输入： $ su 然后输入刚设置的密码，即可进入 root 账户！ 3 远程操作树莓派在我的电脑上，用于对树莓派进行远程操作的有3个软件。其中，Putty 和 WinSCP 用的是 SSH 协议，树莓派的 Raspbian 系统是自动开启 SSH 服务的，所以我们不需要进行额外的配置。连上网得到其 IP 地址就能连。用 Putty 进命令行控制树莓派，是我最喜欢的方式——黑色的框框，独立于世。用 WinSCP 与服务器交换文件，很方便。如果想在自己电脑上进树莓派的图形桌面，上面两个软件是满足不了你的。这时 TightVNCViewer 就派上用场了！得到了 IP 地址还不够，我们要在树莓派上配置 VNC 服务，如下——安装 tightvncserver： $ sudo apt-get update $ sudo apt-get install tightvncserver 配置连接密码： $ tightvncserver 设置开机自启： $ wget http://www.penguintutor.com/otherfiles/tightvncserver-init.txt $ sudo mv tightvncserver-init.txt /etc/init.d/tightvncserver $ sudo chown root:root /etc/init.d/tightvncserver $ sudo chmod 755 /etc/init.d/tightvncserver $ sudo update-rc.d tightvncserver defaults $ sudo /etc/init.d/tightvncserver start $ reboot 4 更换源这个可以参考这篇博文，但我按照他的方法更换源后，安装有些软件的时候会提示找不到，于是我又换回官方源了，虽然慢点，但至少有啊…… 5 安装 Firefox$ sudo apt-get update $ sudo apt-get install iceweasel 参考资料：【１】Raspberry Pi Basics: installing Raspbian and getting it up and running【２】树莓派2代无显示器安装系统(固定IP+VNC开机自启动)【３】树莓派 ( Raspberry pi ) 安装火狐浏览器 作者 @Iris2017 年 3 月 18 日","tags":[{"name":"Raspberry pi","slug":"Raspberry-pi","permalink":"http://irislr.me/tags/Raspberry-pi/"},{"name":"RASPBIAN","slug":"RASPBIAN","permalink":"http://irislr.me/tags/RASPBIAN/"}]},{"title":"利用 SSH 远程登录 VPS 的初尝试","date":"2017-01-25T11:31:57.000Z","path":"/posts/a409b975/","text":"前言：最近在腾讯云上注册了 1 元学生特惠（云服务器＋域名）。为了以后能一起愉快的玩耍，首先要学会远程登录，然后还要进行一些必要的配置。 环境： 本地系统：Linux 4.8.10-1-ARCH linux x64 VPS 系统 1：CentOS 6.5 64bits VPS 系统 2：Ubuntu 16.04.1 LTS 64bits 1 登录 CentOS1.1 通过公网 IP 登录 VPS$ ssh root@公网 IP 输入 root 密码后即可以 root 身份进入系统。 1.2 创建普通用户添加用户和密码： # adduser USERNAME # passwd USERNAME 添加 sudo 功能： # visudo ------------------- 添加： USERNAME ALL=(ALL) ALL 切换至新用户： # su - USERNAME 更新下， $ sudo yum -y update 2 登录 Ubuntu2.1 远程登录同样是： $ ssh ubuntu@公网 IP 遇到错误。。。根据错误提示信息，解决方法如下： $ rm ~/.ssh/hnown_hosts 参考资料：【１】How To Create a Sudo User on CentOS [Quickstart]【２】使用 Linux 终端 SSH 登录 VPS 作者 @Iris2017 年 1 月 25 日","tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://irislr.me/tags/CentOS/"},{"name":"VPS","slug":"VPS","permalink":"http://irislr.me/tags/VPS/"},{"name":"SSH","slug":"SSH","permalink":"http://irislr.me/tags/SSH/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://irislr.me/tags/Ubuntu/"}]},{"title":"ArchLinux的问题集锦（持续更新）","date":"2017-01-24T11:02:18.000Z","path":"/posts/d5332367/","text":"前言：不管使用什么系统，总会遇到一些令人头疼的问题。在这篇文章中，会记录一些笔者平时遇到的棘手问题，并且会长期更新。而记录的目的则在于——当我们再次见面，也许能笑着说一句“好久不见”…… 1 openssh 故障openssh 之前一直在用，但是最近出毛病了，如下： $ ssh #################### ssh: error while loading shared libraries: libldns.so.2: cannot open shared object file: No such file or directory 提示缺少 libldns.so.2 。 先后尝试了两种解决方法，最后有用的还是更新 Pacman 软件包: $ sudo pacman -Syu 参考资料： 作者 @Iris2017 年 1 月 24 日","tags":[{"name":"ArchLinux","slug":"ArchLinux","permalink":"http://irislr.me/tags/ArchLinux/"},{"name":"Tips","slug":"Tips","permalink":"http://irislr.me/tags/Tips/"}]},{"title":"POJ1002-487-3279","date":"2017-01-19T12:36:28.000Z","path":"/posts/605d4c67/","text":"前言：首先我要说，这种类似的题我至少做过三道以上，而且无一不是以 TLE 告结。这一“离奇悬案”一直以来也算是心头一大疙瘩，如今能在这么闲暇的时刻再次相遇，也只能用缘分解释了Ｏ（∩＿∩）Ｏ哈哈～在破解本案后，你只需要记住一句话——大数据的输入效率不容忽视！ 1 思路理顺首先，对问题先做个简化处理。忽略字符串中的 - ，将所有的字母转换成对应的数字，将每个电话号码字符串转换成一个７位或以下的数字，小 case ！接下来，我们需要两个大数组。一个大小是 10000000 ，负责存储号码出现的次数，对应的数组下标就是拥有该次数的号码；另一个大小为 50000 ，依次存储出现次数为一次以上的号码，最后用 sort 对它进行排序输出即可。上面这种做法算是典型的利用空间来换取时间吧，反正目前为止还没遇到过空间超出的 DC …… 2 调试技巧第一次修改是因为下面这个样例： 2 0000000 0000000 于是改了输出格式， printf 很给力！ 第二次修改是因为输出的应该是 No duplicates. 而不是 No duplicates …… 最后，一直报 TLE 的错误，对算法效率分析了很久，感觉凭自己的能力没办法再优化了。感谢搜索引擎的强大功力，感谢这篇博文，让我意识到一直被忽略的输入效率。 3 源代码（Ｃ＋＋）#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;algorithm&gt; #define MAX1 10000000 #define MAX2 50000 using namespace std; int r1[MAX1] = {0}; // 号码出现的次数 int r2[MAX2]; // 出现次数为一次以上的号码 char tmpStr[MAX2]; // 临时存储输入数组 int main(){ int n, s, num, k = 0; cin &gt;&gt; n; for(int i = 0; i &lt; n; i++){ s = 0; scanf(&quot;%s&quot;, tmpStr); for(int i = 0; tmpStr[i] != &apos;\\0&apos;; i++){ if(tmpStr[i] != &apos;-&apos;){ if(tmpStr[i] &gt;= &apos;A&apos; &amp;&amp; tmpStr[i] &lt;= &apos;P&apos;) num = (int)(tmpStr[i] - &apos;A&apos;) / 3 + 2; else if(tmpStr[i] &gt;= &apos;R&apos; &amp;&amp; tmpStr[i] &lt;= &apos;Y&apos;) num = (int)(tmpStr[i] - &apos;A&apos; - 1) / 3 + 2; else num = tmpStr[i] - 48; s = s * 10 + num; } } r1[s]++; if(r1[s] == 2){ r2[k++] = s; } } sort(r2, r2 + k); for(int i = 0; i &lt; k; i++) printf(&quot;%03d-%04d %d\\n&quot;, r2[i] / 10000, r2[i] % 10000, r1[r2[i]]); if(k == 0) cout &lt;&lt; &quot;No duplicates.&quot; &lt;&lt; endl; return 0; } 4 经验＋大数据的输入会很占时间，scanf 、 gets 比 cin 快！！！ C 与 C++ 头文件混搭的情况下 G++ 会报编译错误，选择 C++ 编译就没问题！！！ 参考资料：【１】大卫david POJ1002 487-3279【２】487-3279 作者 @Iris2017 年 1 月 19 日","tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://irislr.me/tags/Algorithm/"},{"name":"C++","slug":"C","permalink":"http://irislr.me/tags/C/"},{"name":"POJ","slug":"POJ","permalink":"http://irislr.me/tags/POJ/"}]},{"title":"POJ1001-求高精度幂","date":"2017-01-18T11:44:47.000Z","path":"/posts/f52fb2ab/","text":"前言：高精度问题——包括高精度加减法、高精度乘除法、高精度幂等。其中，高精度幂的实现中包含了高精度和与高精度乘的精髓。显然，最直接的解题方法就是模拟人的手算过程，有小学底子就行。这一类题的特点是算法过程通俗易懂，但是实现起来必须很谨慎，因为一个细节可能就得赔上半天时间，本人在调试过程中算是深有体会了……在成功做完本题后，你会发现，最花时间规条最多的不是大数相乘和相加的实现，而是小数点位置以及特殊情况的考虑。 1 思路理顺输入如何接收并处理？定义两个 string 类型的变量，用于进行接收，然后转存到 vector 容器中，同时记录小数点的位置并删除之。注：之所以选择 vector ，是因为 vector 自带 size 属性，而且不必涉及内存分配的问题，否则定义一个结构体也可以。 幂计算过程？完全模拟手算过程。定义两个 vector 变量，一个存储当前乘数，一个存储当前相乘临时结果。其中，这一轮的临时结果成为下一轮的一个乘数，因此要进行循环赋值操作。 数据的存储方式？考虑到手算过程是从后往前算的，而且计算没有结束之前是无法确定结果位数的，因此中间变量大数和最终结果大数一律选择倒着存储。 如何输出？输出之前，有两个 tips 需要处理，一是前导后导去零，二是定位小数点位置。最后的结果在 vector 里面，并且是倒着的，因此要倒着输出。 特殊情况？对题目进行“咬文嚼字”，尽量试验边沿情况，找出错误的输入。找出错误后就好解决了！ 2 调试技巧如果了解了本题的基本解法，过样例是很容易的事。关键的是下面几种特殊情况： 98.999 1 0.0010 3 10.000 1 一般，样例＋上面3个能通过的话，基本就没啥大问题了！ 3 源代码（Ｃ＋＋）#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; #include &lt;algorithm&gt; #define MAX 500 using namespace std; vector&lt;int&gt; R; // 基数 // 幂计算过程，完全模拟手算 vector&lt;int&gt; myProb(vector&lt;int&gt; a){ int b[MAX] = {0}; int tmp, c, k; for(int i = 0; i &lt; 5; i++){ c = 0; for(int j = 0; j &lt; a.size(); j++){ k = i + j; tmp = R[i] * a[j] + c + b[k]; c = tmp / 10; b[k] = tmp % 10; } if(c) b[++k] = c; } // 因为上面用 vector 需要有时候是 push_back 而有时候又是直接赋值， // 所以选择先用数组存着，后面再做转化。可谓 vector // 实现了动态分配内存，而又不可避免要面对这种问题。 vector&lt;int&gt; rb; for(int i = 0; i &lt;= k; i++) rb.push_back(b[i]); return rb; } int main(){ int n; string tmpR, tmpn; // 临时接收 while(cin &gt;&gt; tmpR &gt;&gt; tmpn){ int point; R.clear(); // 必须清空 // 处理基数 R for(int i = 0; i &lt;= 5; i++){ if(tmpR[i] == &apos;.&apos;) point = 5 - i; // 记录小数位数 else R.push_back(tmpR[i] - 48); // 将除小数点外的数字一一写进数组中 } reverse(R.begin(), R.end()); // 翻转 // 计算指数ｎ n = 0; for(int i = 0; i &lt; tmpn.length(); i++) n = n * 10 + tmpn[i] - 48; point = point * n; // 计算结果的小数位数 // 幂乘 vector&lt;int&gt; r1, r2; r1 = R; // 将 r1 的初值设为 R ，是因为在 n = 1 的情况下，不会进入下面的循环，最后结果即为基数 R for(int i = 0; i &lt; n - 1; i++){ r2 = myProb(r1); r1 = r2; } //输出 int tmp = 0; // tmp 是去除后导 0 后的终点位置 while(!r1[tmp] &amp;&amp; tmp &lt; point) tmp++; // 由于10.000 1 的特例输出应为 10，加了 tmp &lt; point if(tmp == r1.size()) cout &lt;&lt; 0; for(int i = r1.size() - 1; i &gt;= tmp; i--){ // 唯一需要去除前导 0 的情况是——基数为零点几几，因此加入下句判断即可 if(i == r1.size() - 1 &amp;&amp; i == point &amp;&amp; r1[i] == 0) continue; if(i == point - 1) cout &lt;&lt; &apos;.&apos;; // 插入小数点 cout &lt;&lt; r1[i]; } cout &lt;&lt; endl; } return 0; } 4 经验＋string の 用法cin &gt;&gt; string 以空格结束。 reverse の 用法 #include &lt;algorithm&gt; reserve(begin, end); 参考资料：【１】POJ1001 高精度乘法【２】求高精度幂 作者 @Iris2017 年 1 月 18 日","tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://irislr.me/tags/Algorithm/"},{"name":"C++","slug":"C","permalink":"http://irislr.me/tags/C/"},{"name":"POJ","slug":"POJ","permalink":"http://irislr.me/tags/POJ/"}]},{"title":"vim的优化","date":"2017-01-15T11:46:41.000Z","path":"/posts/2209c94b/","text":"前言：之前研究过 Ubuntu 下的 Vim 优化，那个貌似简单很多，毕竟什么基本设置都有，稍微删几个注释符或者修改几个参数就好了。在 Archlinux 下貌似没这么简单？什么颜色搭配风格啊，自动缩进啊，代码识别和高亮啊。恩，还有括号匹配！说实话，这些问题不解决，敲代码都很费时费力呢！停……这表示我换上这个系统以来都没规规矩矩の码过字啊，这么久了都没想过优化优化 wuli 可爱的 Vim ？估计装了这个系统后就一直在忙考试，而没时间整这些，惭愧惭愧。 环境： 系统：Linux 4.8.10-1-ARCH linux x64 1 颜色配置关于配色，我依旧钟情于 Solarized 的配色方案。它的 dark backgroud ，时尚而不失真诚，优雅却不乏热情。开始吧！首先，先新建几个必要的文件夹 $ mkdir ~/.vim $ mkdir ~/.vim/colors 接着，去官网提供的 github 托管地址，咱也不忙着下载，先去看看 readme ！有优雅的下载方式等着我们呢！ $ cd ~/Download $ git clone git://github.com/altercation/vim-colors-solarized.git $ cd vim-colors-solarized/colors $ mv solarized.vim ~/.vim/colors/ 配色文件放好后，后面就要修改 .vimrc ，来将配色主题设置进去了： $ vim ~/.vimrc #################### 在后面添加： &quot;打开语法高亮，显示行号 set nu! colorscheme desert syntax enable syntax on &quot;设置配色 set background=dark colorscheme solarized 打开语法高亮，以便正确显示。重启使 Vim 生效后，发现 gvim 能正常显示，而 vim 的色调却阴阳怪气的，这是因为 Vim 配色与 Terminal的配色发生混叠的结果。既然如此，将 set background=dark 改为： if has(&apos;gui_running&apos;) set background=light else set background=dark endif 重启看看效果吧！ 2 括号自动补全很多现代 IDE 都有自动补全配对括号的功能，比如输入了左括号“(”，IDE 就自动在后面添加一个对应的右括号“)”，并且将光标移到括号中间。Vim 虽然没有直接提供这个功能，但要实现其实非常简单，只要在你的 .vimrc 文件中添加下面的内容就可以了： $ vim ~/.vimrc #################### 在后面添加匹配括号： inoremap ( ()&lt;LEFT&gt; inoremap [ []&lt;LEFT&gt; inoremap { {}&lt;LEFT&gt; 原理很简单，就是将左括号的键映射为一个新的操作，在输入左括号时，让 Vim 立刻输入右括号，同时再将光标左移一格到括号中间。另外，在自动补全了右括号之后，如果用户再输入右括号会怎么样呢？一般来说，比较合理的做法似乎是忽略掉这个后输入的多余的右括号，直接将光标向右移到一格。代码如下： &quot; 输入的前一个字符是左括号时时，如果后一个字符是右括号，则删除它，避免出现重复字符 function! RemoveNextDoubleChar(char) let l:line = getline(&quot;.&quot;) let l:next_char = l:line[col(&quot;.&quot;)] &quot; 取得当前光标后一个字符 if a:char == l:next_char execute &quot;normal! l&quot; else execute &quot;normal! i&quot; . a:char . &quot;&quot; end endfunction inoremap ) &lt;ESC&gt;:call RemoveNextDoubleChar(&apos;)&apos;)&lt;CR&gt;a inoremap ] &lt;ESC&gt;:call RemoveNextDoubleChar(&apos;]&apos;)&lt;CR&gt;a inoremap } &lt;ESC&gt;:call RemoveNextDoubleChar(&apos;}&apos;)&lt;CR&gt;a 3 自动缩进换行时需要根据语法规则进行自动缩进。并且按照习惯，将 tab 的缩进定义成 4 格： $ vim ~/.vimrc #################### 在后面添加： &quot;设置tab为缩进４格 set ts=4 set sw=4 &quot;自动缩进 set expandtab set autoindent 4 gvim 菜单栏与工具栏隐藏与显示动态切换新建 .gvimrc ，并添加内容： $ vim ~/.gvimrc #################### 添加： &quot;Toggle Menu and Toolbar set guioptions-=m set guioptions-=T map &lt;silent&gt; &lt;F2&gt; :if &amp;guioptions =~# &apos;T&apos; &lt;Bar&gt; \\set guioptions-=T &lt;Bar&gt; \\set guioptions-=m &lt;bar&gt; \\else &lt;Bar&gt; \\set guioptions+=T &lt;Bar&gt; \\set guioptions+=m &lt;Bar&gt; \\endif&lt;CR&gt; 再次启动 gvim 时，菜单栏与工具栏默认是隐藏的，这样可以充分利用窗口空间，使其显示更多的文本内容。在必要时，可使用 F2 键呼出菜单栏/工具栏；待不使用时，用 F2 键将其关闭。 参考资料：【１】Vim以及Terminal 配色方案—“Solarized”配色【２】VIM中括号的自动补全与删除【３】gvim 菜单栏与工具栏隐藏与显示动态切换 作者 @Iris2017 年 1 月 15 日","tags":[{"name":"Vim","slug":"Vim","permalink":"http://irislr.me/tags/Vim/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://irislr.me/tags/Archlinux/"}]},{"title":"Spark+Hadoop+JDK+Scala 的环境搭建","date":"2017-01-13T06:35:10.000Z","path":"/posts/f1af8126/","text":"前言：心血来潮，最近准备开始学习一直以来心心念念的云计算。说来，人也确实是个奇怪的物种，越是觉得高深的东西，越是想去了解它，征服它……云计算，核心是分布式计算。鄙人的浅显理解就是——通过协调多硬件的新型算法来弥补传统算法在大数据领域的缺陷。实践为先，那么，从搭建环境开始吧！ 环境： 系统：Linux 4.8.10-1-ARCH linux x64JDK：java 1.7.0_111Hadoop：hadoop-2.7.3Spark：spark-2.1.0-bin-hadoop2.7Scala：scala-2.11.8 1 安装 JDK参照官方给出的安装方法即可。安装 JDK1.7 —— $ sudo pacman -S jdk7-openjdk 查看具体版本 $ java -version java version &quot;1.7.0_111&quot; OpenJDK Runtime Environment (IcedTea 2.6.7) (Arch Linux build 7.u111_2.6.7-1-x86_64) OpenJDK 64-Bit Server VM (build 24.111-b01, mixed mode) 2 安装 Hadoop很不幸，官方 wiki 给出的方法最终以失败告终。 $ sudo yaourt -S hadoop ----------------------- ... ==&gt; Edit PKGBUILD with: /usr/lib/yaourt/util.sh: line 227: PKGBUILD: command not found ==&gt; ERROR: Running makepkg as root is not allowed as it can cause permanent, catastrophic damage to your system. ==&gt; ERROR: An unknown error has occurred. Exiting... 这种类似的错误已经不是第一次遇到了，一般，我会选择另辟一条道路，这一次也一样！首先，去官网下载 hadoop-2.7.3 的 bin 文件。 解压： $ cd ~/Download $ tar -xf hadoop-2.7.3.tar.gz 安装： $ sudo cp -a hadoop-2.7.3 /usr/local $ cd /usr/local $ sudo ln -s hadoop-2.7.3 hadoop 创建临时文件夹： $ mkdir /usr/local/hadoop/tmp 修改文件权限： $ sudo chown -R root:root hadoop-2.7.3 编辑必要的配置文件： $ cd hadoop/etc/hadoop hadoop-env.sh $ sudo vim hadoop-env.sh ###################### 在适当位置添加（实际上注释中会有提示） JAVA_HOME=/usr/lib/jvm/java-7-openjdk core-site.xml $ sudo vim core-site.xml ###################### 在适当位置添加适当代码使其如下： &lt;?xml version=”1.0″?&gt; &lt;?xml-stylesheet type=”text/xsl” href=”configuration.xsl”?&gt; &lt;configuration&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;/usr/local/hadoop/tmp&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://localhost:8020&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; hdfs-site.xml $ sudo vim hdfs-site.xml ###################### 在适当位置添加适当代码使其如下： &lt;?xml version=”1.0″?&gt; &lt;?xml-stylesheet type=”text/xsl” href=”configuration.xsl”?&gt; &lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;!-- specify this so that running ‘hadoop namenode -format’ formats the right dir --&gt; &lt;name&gt;dfs.name.dir&lt;/name&gt; &lt;value&gt;/usr/local/hadoop/cache/hadoop/dfs/name&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; mapred-site.xml $ sudo vim mapred-site.xml ###################### 在适当位置添加适当代码使其如下： &lt;?xml version=”1.0″?&gt; &lt;?xml-stylesheet type=”text/xsl” href=”configuration.xsl”?&gt; &lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapred.job.tracker&lt;/name&gt; &lt;value&gt;localhost:8021&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; 添加全局变量，编辑 .bashrc $ vim ~/.bashrc ###################### 在后面添加： HADOOP_HOME=/usr/local/hadoop export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin 使新的 .bashrc 生效 $ source ~/.bashrc 3 安装 Spark去官网下载安装包。注：如果不想忍受巨慢下载速度，在下载之前记得把 Choose a download type 设置为 Select Apache Mirror。然后点击下载链接后选择你所在地区较快的镜像（ps：我选的是清华的，下载速度挺给力）。Spark 的安装方法与 Hadoop 类似。首先，解压： $ cd ~/Download $ tar -xf spark-2.1.0-bin-hadoop2.7.tgz 安装： $ sudo cp -a spark-2.1.0-bin-hadoop2.7 /usr/local $ cd /usr/local $ sudo ln -s spark-2.1.0-bin-hadoop2.7 spark 修改文件权限： $ sudo chown -R root:root spark-2.1.0-bin-hadoop2.7 编辑必要的配置文件： $ cd /usr/local/spark/conf $ sudo cp spark-env.sh.template spark-env.sh $ sudo vim spark-env.sh ####################### 在末尾添加： export SPARK_DIST_CLASSPATH=$(/usr/local/hadoop/bin/hadoop classpath) 添加全局变量，编辑 .bashrc $ vim ~/.bashrc ###################### 在后面添加： SPARK_HOME=/usr/local/spark export PATH=$PATH:$SPARK_HOME/bin 使新的 .bashrc 生效 $ source ~/.bashrc 最后，测试下 Spark 是否能正常工作 $ cd /usr/local/spark/examples/src/main/java/org/apache/spark/examples $ run-example SparkPi 2&gt;&amp;1 | grep &quot;Pi is roughly&quot; ------------------------- Pi is roughly 3.14514 搞定！ 最详细的 Spark 学习资料请访问这里。 4 安装 Scala去官网下载 bin 包。解压： $ cd ~/Download $ tar -xf scala-2.11.8.tgz 安装： $ sudo cp -a scala-2.11.8 /usr/local $ cd /usr/local $ sudo ln -s scala-2.11.8 scala 修改文件权限： $ sudo chown -R root:root scala-2.11.8 添加全局变量，编辑 .bashrc $ vim ~/.bashrc ###################### 在后面添加： SCALA_HOME=/usr/local/scala export PATH=$PATH:$SCALA_HOME/bin 使新的 .bashrc 生效 $ source ~/.bashrc 检验是否能正常工作，简单点，那就写个初学必会的 HelloWorld 吧！由于上一步已经设置全局变量了，因此在任意目录下，能直接进入 scala 交互 shell： $ scala HelloWorld 的实现如下所示： 成功！ 参考资料：【１】Install Hadoop 2.X for Arch Linux【２】Spark快速入门指南 – Spark安装与基础使用【３】Spark Programming Guide【４】getting-started 作者 @Iris2017 年 1 月 13 日","tags":[{"name":"Spark","slug":"Spark","permalink":"http://irislr.me/tags/Spark/"},{"name":"Hadoop","slug":"Hadoop","permalink":"http://irislr.me/tags/Hadoop/"},{"name":"JDK","slug":"JDK","permalink":"http://irislr.me/tags/JDK/"},{"name":"Scala","slug":"Scala","permalink":"http://irislr.me/tags/Scala/"}]},{"title":"linux 系统的有线＆无线连接","date":"2017-01-07T13:21:24.000Z","path":"/posts/9d3eead8/","text":"前言：archlinux 下的 wifi 连接，一直是一个想要解决又懒得去碰的问题。一是电脑放在工作室，这里的网线充足，有线快，可以很好的满足我的需求；二来，总觉得网络是个很高深的东西，算是从心底里有种畏惧吧。现在，临近寒假了，想在回家之前把这个问题解决掉。不巧，正好有两个朋友想玩 linux ，我帮他们装了 ubuntu 16.04 ，有线能识别，但是识别不了 wifi ，通过 google ，原来是 BIOS 的设置问题，这种无法解释的事情，我觉得有必要记下来…… 1 有线连接1.1 ubuntu在生活中遇到最多的就是动态分配的路由器了吧！如果想要开机自动连接这类路由器，需要修改网络配置文件—— $ sudo vim /etc/network/interfaces 添加如下内容： $ auto eth0 $ iface eth0 inet dhcp 至于这里的 eth0 ，只不过是网卡名称的代名词。要具体情况具体定（ ps: 像我的就是enp7s0 ）。一般驱动是自动装好的，执行如下命令可以查看本机的 eth0： $ ifconfig -a 1.2 archlinux同样是连接动态分配 ip 的路由器，命令行如下： $ sudo ip link set enp7s0 up $ sudo dhcpcd enp7s0 每次开机都要手动输入很不方便，那就加入开机自启吧! 新建 rc-local.service $ sudo vim /usr/lib/systemd/system/rc-local.service 写入以下内容： [Unit] Description=/etc/rc.local Compatibility ConditionPathExists=/etc/rc.local [Service] Type=forking ExecStart=/etc/rc.local TimeoutSec=0 StandardOutput=tty RemainAfterExit=yes SysVStartPriority=99 [Install] WantedBy=multi-user.target 然后新建 rc.local $ sudo vim /etc/rc.local 写入： #!/bin/bash ip link set enp7s0 up dhcpcd enp7s0 保存之后将其权限设置为可执行 $ sudo chmod +x /etc/rc.local 最后使用systemctl开机自启动此service $ sudo systemctl enable rc-local.service 重启后发现能自动连网了！ 2 无线连接2.1 ubuntu这个在前言里面已经提到过了，修改 BIOS 的 secure boot 为 disable即可自动识别。 2.2 archlinux先列出网络适配器型号 $ lspci -k | grep -A 2 -i network --------------------------- 06:00.0 Network controller: Broadcom Limited BCM43142 802.11b/g/n (rev 01) Subsystem: Dell Wireless 1704 802.11n + BT 4.0 Kernel driver in use: wl iwconfig 只输出 lo 和 enp7s0 ，而 iw dev 无输出，显然是驱动没装好，google 好久，看了网上对博通网卡驱动的各种吐槽，快要放弃的时候，看到了这篇文章，真是救命草啊！ $ sudo yaourt -S broadcom-wl-dkms reboot 重启后，再 iw dev 就发现有 wlp6s0 了。 $ iw dev --------------------------- lo no wireless extensions. enp7s0 no wireless extensions. wlp6s0 IEEE 802.11 ESSID:off/any Mode:Managed Access Point: Not-Associated Retry short limit:7 RTS thr:off Fragment thr:off Power Management:off 首先，安装必要软件包 $ sudo pacman -S wireless_tools $ sudo pacman -S wpa_supplicant $ sudo pacman -S netctl 启用 wlp6s0 $ sudo ip link set wlp6s0 up 扫描可用热点 $ sudo iw dev wlp6s0 scan 查看 wifi 的加密方式，根据不同方式采取不同措施。其中加密方式为 WPA-PSK 用 wpa_supplicant；加密方式为 WEP 用 iw dev wlan0 connect your_essid key d:2:your_key 形式。这里，用 netctl 工具来管理网络。自动在 /etc/netctl/ 中生成配置文件： $ sudo wifi-menu -o 在创建好配置文件之后，可以尝试运行（仅需写出文件名，不包含完整路径）： $ sudo netctl start profile iwconfig 即可看到已连上 wifi。 3 通过手机 USB 给电脑共享网络你是否遇到过这样的窘境，既找不到有线网也搜不到无线网，手机成了与外界沟通的唯一方式。毕竟有些事情，用手机也不方便，比如刷 ACM ……这个时候，你肯定会想到通过 USB 将网络共享给电脑吧！在 windows 10 下简单地将手机连上就能上网，同样，在 linux 下也只需要那么一两步就能让你“重见天日”！如果你的电脑是 linux ，如果你的手机支持 USB 共享网络，那么下面将是你迫不及待想看到的——第一步：将你的手机通过 usb 线连接到电脑上，紧接着打开手机的 usb 共享网络开关。如果你要问具体怎么打开的话，还是去百度一下或者翻翻说明书，实在不行就给客服打电话，哈哈！第二步：查看手机热点在你电脑上得到的“专属名称”。 $ iwconfig ----------------------- lo no wireless extensions. enp0s29u1u3 no wireless extensions. enp7s0 no wireless extensions. wlp6s0 IEEE 802.11 ESSID:off/any Mode:Managed Access Point: Not-Associated Retry short limit:7 RTS thr:off Fragment thr:off Power Management:off 很明显，我的多出了 enp0s29u1u3 ，这个就是手机热点对应的设备名称啦！第三步：接下来的步骤就类似于上面提到的有线 dhcp 连接方式了。 $ sudo ip link set enp0s29u1u3 up $ sudo dhcpcd enp0s29u1u3 最后，检验下是否真的能上网了！ $ ping -c 3 baidu.com 能成功返回数据就表示已连上网！ 参考资料：【１】ubuntu14.04 网卡BCM43142 make网卡驱动的候出现如下问题【２】ArchLinux Systemd 增加rc-local自运行【３】archlinux配置BCM43142无线网卡 作者 @Iris2017 年 1 月 7 日","tags":[{"name":"archlinux","slug":"archlinux","permalink":"http://irislr.me/tags/archlinux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://irislr.me/tags/ubuntu/"},{"name":"wifi","slug":"wifi","permalink":"http://irislr.me/tags/wifi/"}]},{"title":"重装 Linux 后的 Hexo 博客环境恢复","date":"2016-11-28T01:45:34.000Z","path":"/posts/895fff49/","text":"前言：由于本人之前已经在 windows 和 ubuntu 平台搭好过本地写 blog 平台，有全部文件备份。故本博文没有涉及到 github 账号申请和 Hexo 建站等流程。此博文仅仅是在新系统上的重新布置，和本人情况类似的游客下文可做一定参考，也劳烦 没有文件备份的游客移步他家。 环境： os : Linux 4.8.10-1-ARCH linux x64 git : 2.10.2 node : 7.2.0 npm : 4.0.2 hexo-cli : 1.0.2 1 关联github1.1 设置git系统中 git 已默认安装，设置 git 用户名称和邮件地址： $ git config --global user.name &quot;username&quot; $ git config --global user.email &quot;username@example.com&quot; 1.2 配置git私钥安装 openssh $ sudo pacman -S openssh 生成 SSH key $ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; 首先确保 ssh-agent 可运行： $ ssh-agent -s 然后添加SSH key： $ ssh-add ~/.ssh/id_rsa 拷贝 ~/.ssh/id_rsa.pub 中的内容，然后，在 GitHub 右上方点击头像，选择 ”Settings”，在右边的 ”Personal settings” 侧边栏选择 ”SSH Keys”。点击 ”Add key” 按钮添加，接着粘贴 key。 测试： $ ssh -T git@github.com 2 安装node.js和Hexo2.1 安装node.js法一：按照 Hexo 官方给出的安装方法，通过 nvm 进行安装。安装 nvm： $ curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh 重启Terminal，安装 Node.js $ nvm ls-remote $ nvm install v7.2.0 网太慢的原因？下载总出错……果断尝试法二。 法二：按照 Arch wiki 给出的安装方法。 nodejs 位于官方软件仓库，直接通过 pacman 安装： $ sudo pacman -S nodejs npm 同上： $ sudo pacman -S npm 2.2 安装Hexo使用 npm 完成 Hexo 的安装： $ sudo npm install -g hexo-cli &lt;== 注：这里不用 sudo 会报错 由于本人在之前已经备份过 myHexo 的全部文件，因此不必 hexo init 了。接下来，直接进入移动硬盘里面的 blog 文件目录： $ hexo g $ hexo s &lt;== 本地 0.0.0.0:4000 预览 $ hexo d &lt;== 部署至 github 访问 0.0.0.0:4000 大功告成! 3 绑定域名首先，进入博客根目录，执行： $ echo &apos;yourYuming&apos;&gt;source/CNAME 然后，去域名管理网站进行解析，A 记录 IP 可选择 192.30.252.153。 参考资料：【１】GitHub Pages + Hexo搭建博客【２】博客搭建过程 作者 @Iris2016 年 11 月 28 日","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://irislr.me/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"http://irislr.me/tags/Blog/"}]},{"title":"撕人定制 ArchLinux（三）","date":"2016-11-27T10:30:32.000Z","path":"/posts/ed0561c6/","text":"此博文继撕人定制 ArchLinux（一）撕人定制 ArchLinux（二）后，介绍了 gnome 图形界面以及必要软件和驱动的安装。 1 gnome桌面安装1.1 添加普通用户新安装的系统只有一个超级用户，即 root 。添加名为 myUsername 普通用户： # useradd myUsername 并为所创建用户设定密码： # passwd myUsername 权限提升——安装sudo让普通用户执行root命令： # pacman -S sudo # nano /etc/sudoers &lt;== 添加 myUsername ALL＝ALL(ALL) 1.2 连接网络连接 dhcp 有线网络： $ sudo ip link set enp7s0 up $ sudo dhcpcd enp7s0 1.3 安装基本的图形环境以及驱动程序安装xorg核心组件： $ sudo pacman -S xorg-server xorg-xinit xorg-utils xorg-server-utils 安装开源显卡驱动，或者安装闭源驱动catalyst： $ sudo pacman -S xf86-video-ati 安装触摸板驱动： $ sudo pacman -S xf86-input-synaptics 1.4 安装gnome桌面安装基本桌面环境和精选的应用程序： $ sudo pacman -S gnome 安装剩余的可选工具： $ sudo pacman -S gnome-extra 进入桌面： $ startx 2 常用软件的安装2.1 yaourt在/etc/pacman.conf中添加软件仓库： $ sudo vim /etc/pacman.conf &lt;== 添加 [ArchLinuxfr] SigLevel = Optional TrustAll Server = http://repo.ArchLinux.fr/$arch 然后命令行中安装： $ sudo pacman -Sy yaourt 使用yaourt来更新所有系统中的包： $ yaourt -Syua 2.2 fcitx中文输入法安装fcitx输入法作为中文输入法： $ sudo pacman -S fcitx-im 为保证fcitx能够正常在各个环境中使用，安装： $ sudo pacman -S fcitx-qt5 安装AUR里的搜狗拼音输入法： $ sudo yaourt -S fcitx-sogoupinyin 安装图形配置工具： $ sudo pacman -S fcitx-configtool 设置开机自启，在.xinitrc文件中写入配置信息： $ sudo vim ~/.xinitrc &lt;== 添加 export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=&quot;@im=fcitx&quot; //让fcitx成为默认输入法 2.3 chromium安装 $ sudo pacman -S chromium 为 chromium 安装 flash 插件 $ sudo yaourt -S pepper-flash $ sudo yaourt -S chromium-widevine 2.4 sublime-text-3安装 $ sudo pacman -S sublime-text-dev 无法输入中文的解决方案——下载必要的文件并复制到相应的目录： $ git clone https://github.com/lyfeyaj/sublime-text-imfix.git $ cd sublime-text-imfix $ sudo cp ./lib/libsublime-imfix.so /opt/sublime_text/ $ sudo cp ./src/subl /usr/bin/ 在～下新建文件名为sublime $ vim sublime &lt;== 添加 #!/bin/bash LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so subl 重新运行 sublime 就可以输入中文了 $ bash ~/sublime 以后都要用上面这条语句运行sublime 2.5 VirtualBox安装：用 pacman 安装软件包 virtualbox： $ sudo pacman -S virtualbox 选择 linux 内核模块获取方式，安装 virtualbox-host-modules-arch： $ sudo pacman -S virtualbox-host-modules-arch 要使用基于 Qt 的图形界面： $ sudo pacman -S qt5-x11extras VirtualBox 在 Linux 上运行需要使用自己的内核模块，vboxdrv 模块必须在虚拟机运行前加载。手动加载模块： $sudo modprobe vboxdrv 运行 VirtualBox。 优化 vbox 体验：装完 xp 虚拟机后，发现没有适应屏幕的分辨率，并且鼠标移动迟钝，baidu 后才知道是因为还没安装增强软件包～ step1：添加留空光驱（１）关闭虚拟机，回到 VirtualBox 管理器中，然后选中你创建的虚拟机，右击点 setting。（２）在弹出的虚拟机设置中，在左侧列表中找到 storage 选项。（３）在右边存储树列表中，点击添加虚拟光驱。如图：红线圈中，光驱选择留空就行了。 step2：安装增强软件包打开虚拟机，点击 Device -&gt; Insert Guest Additions CD image。vBox 会自动将增强包挂载到虚拟机的光驱上，双击安装即可。 step3：添加共享文件夹这个很简单。创建完共享文件夹后，虚拟机 xp 端通过 我的电脑 -&gt; 映射网络驱动器 进行访问。 2.6 Matlab R2016a按照网上的教程一路安装下来，没啥问题，但是 ./matlab 启动的时候报错了，错误截图如下 ==&gt; 所幸 google 后找到解决办法 $ sudo ln -s /usr/lib/libncursesw.so.6 /usr/local/MATLAB/R2016a/bin/glnxa64/libncurses.so.5 再执行 ./matlab 的时候会提示选择许可文件激活，但是报错了 ==&gt; 从错误可以很明显看出是权限问题，于是 sudo ./matlab许可文件位置选 /usr/local/MATLAB/R2016a/bin/licenses搞定！ 最后，设置命令行任意位置启动matlab： $ sudo ln -s /usr/local/MATLAB/R2016a/bin/matlab /usr/local/bin/matlab 接下来还需要解决：中文乱码的解决不能输入中文的问题 2.7 wps-office$ sudo yaourt -S wps-office 2.8 中文乱码问题 参考资料：【１】 ArchLinux官方教程【２】 寒假折腾Archlinux的一些经验（新手向）–桌面配置篇【３】 如何设置 Oracle VM VirtualBox 虚拟机全屏【４】 Ubuntu 16.04下安装MATLAB R2016a 作者 @Iris2016 年 11 月 27 日","tags":[{"name":"ArchLinux","slug":"ArchLinux","permalink":"http://irislr.me/tags/ArchLinux/"},{"name":"系统安装","slug":"系统安装","permalink":"http://irislr.me/tags/系统安装/"}]},{"title":"撕人定制 ArchLinux（二）","date":"2016-11-27T10:28:32.000Z","path":"/posts/a01bc294/","text":"此博文继撕人定制 ArchLinux（一）后，主要介绍了安装基本系统的具体过程。 1 安装及基本配置1.1 选择镜像编辑 /etc/pacman.d/mirrorlist # nano /etc/pacman.d/mirrorlist 选择中国的镜像。 1.2 安装基本系统执行 pacstrap 脚本，默认会安装 base 组： # pacstrap /mnt 如果你想通过 AUR 或者 ABS 编译安装软件包,需要装上 base-devel： # pacstrap -i /mnt base base-devel 安装完成后会提示 ==&gt; Image creation successful. 1.3 基本配置1.3.1 Fstab用以下命令生成 fstab 文件 (用 -U 或 -L 选项设置 UUID 或卷标)： # genfstab -U /mnt &gt;&gt; /mnt/etc/fstab 1.3.2 ChrootChange root 到新安装的系统： # arch-chroot /mnt /bin/bash 1.3.3 时区设置时区: # ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 调整时间漂移: # hwclock --systohc --utc 1.3.4 Locale本地化的程序与库若要本地化文本，都依赖 Locale, 后者明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准等等。在下面两个文件设置：locale.gen 与 locale.conf./etc/locale.gen 是一个仅包含注释文档的文本文件。指定需要的本地化类型，只需移除对应行前面的注释符号（＃）即可，建议选择帶UTF-8的項： # nano /etc/locale.gen en_US.UTF-8 UTF-8 zh_CN.UTF-8 UTF-8 接着执行locale-gen以生成locale讯息： # locale-gen /etc/locale.gen 生成指定的本地化文件，每次 glibc 更新之后也要运行 locale-gen。创建 locale.conf 并提交你的本地化选项： 1.3.5 主机名要设置 hostname，将其添加 到 /etc/hostname, myhostname 是需要的主机名: # echo myhostname &gt; /etc/hostname 1.3.6 Root 密码设置 root 密码: # passwd 1.3.7 安装引导程序安装软件包 grub 和 efibootmgr： # pacman -S grub # pacman -S efibootmgr 接下来的步骤安装 GRUB UEFI 程序到 esp/EFI/grub中, 安装其模块到/boot/grub/x86_64-efi，我这里下面的 $esp 为 /boot/EFI # grub-install --target=x86_64-efi --efi-directory=$esp --bootloader-id=grub 然后将可以启动的 grubx64.efi 复制到 $esp/EFI/grub. # cp grubx64.efi $esp/EFI/grub 安装后,需要生成主配置文件 grub.cfg。配置文件的生成过程受到 /etc/default/grub 和 /etc/grub.d/ 下脚本的影响。使用下面命令生成 grub.cfg: # grub-mkconfig -o /boot/grub/grub.cfg 每次修改 /etc/default/grub 后，都需要重新生成主配置文件 1.3.8 重启输入 exit 或按 Ctrl+D 退出 chroot。现在重启系统，移除安装介质并执行 reboot，新系统启动后用 root 登录。 参考资料：【１】 ArchLinux官方教程 作者 @Iris2016 年 11 月 27 日","tags":[{"name":"ArchLinux","slug":"ArchLinux","permalink":"http://irislr.me/tags/ArchLinux/"},{"name":"系统安装","slug":"系统安装","permalink":"http://irislr.me/tags/系统安装/"}]},{"title":"撕人定制 ArchLinux（一）","date":"2016-11-27T10:27:32.000Z","path":"/posts/900d2e4c/","text":"此博文主要介绍了安装前需要进行的一系列准备工作。 前言:我的第一台爱本——灵越3543，是2015年初入手的。下面来回顾下我的”光荣“折腾史…… 2015.2-3：win8.1（电脑自带） 2015.4-11：win7（虚拟机里体验过各种 ubuntu ， centOS ， openSUSE 等等） 2015.12-2016.5：win7 + ubuntu15.10（刚装完的时候经常进 ubuntu ，实际上一个月以后每次都是直接进 win ） 2016.5-6的某些天：win10（想体现下 win10 ，也仅仅只是体验下……） 2016.6-7：centOS7.1（为配置自己的 mcm 工作环境，折腾了不止一点两点额） 2016.8-11：ubuntu16.04（唯一感觉是比 centOS 舒服许多） 2016.11.14-22：win10（双11入手的固态刚到，准备老老实实滚回 win ，却因为某软件问题开机蓝屏进不了系统而放弃治疗……） 2016.11.25：archlinux（你的我一直在寻找的吗？） 先来爆下料呗，哈哈，以下是现在博主爱本startx之后的样子～ 另外，如果想按自己的喜好撕人定制，强烈建议移步 ArchLinux WiKi 的安装指导！实际上，本博文的绝大部分内容也是参考此 wiki 。 接下来，格好删除你的C盘，跟我一起来吧！ 准备: 普通U盘一个 ArchLinux 镜像 电脑一台 1 准备工作1.1 制作启动盘 windows 下面，下载启动盘制作工具 rufus，将镜像写入U盘，注意制作过程中会格式化，记得备份。在此安利下， rufus 真的是一个很给力的工具，目前为止，本人装过的所有 Linux 系统都是用它做的启动盘。 1.2 设置UEFI模式不同电脑有所不同，具体步骤自行 baidu 吧。下面的步骤都是基于的 UEFI 模式的。实际上， BIOS 和 UEFI 两种模式的安装步骤中也仅仅只是分区和安装引导程序的过程有稍许不同。选择 UEFI 的原因？唔……本人认为 UEFI 是趋势吧。 1.3 在硬盘里留出30G以上的空闲空间如果以前装的是 windows ，现在准备装双系统了，那么就进磁盘管理选择一个盘进行删除卷操作。如果以前装的是 windows ，现在准备装 ArchLinux 单系统了，那么直接进大白菜删除所有分区。如果以前装的是 linux ，那就跳过这步吧…… 2 为正式安装做好铺垫 2.1 进入 ArchISO开机前将U盘插入，设置成从U盘启动。开机能看到 ArchISO 的选择界面，一般选第一个就行，默认装64位。 想装32位就选第二个。进去以后即默认获取 root 权限。 2.2 验证启动模式如果 UEFI 模式已经启用 , Archiso 将会使用 systemd-boot 来启动 Arch Linux 。如果你要验证启动模式, 可以尝试列出 efivars 目录: # ls /sys/firmware/efi/efivars 如果出现 No such file or directory 的提示，则需要重新开机检查设置。 2.3 连接到因特网守护进程 dhcpcd 已被默认启用来探测有线设备, 并会尝试连接。因此最省事的方法就是找个路由器设置为 dhcp 的地方。如需验证网络是否正常, 可以使用 ping: # ping -c 3 baidu.com 2.4 更新系统时间用 systemd-timesyncd 确保系统时间是正确的： # timedatectl set-ntp true 2.5 硬盘分区找到你的硬盘名称，我的固态显示为 /dev/sdb： # fdisk -l 下面使用 parted 工具进行分区，四个分区依次为 /boot/EFI , / , swap , /home： # parted /dev/sdb (parted) mkpart p 0 512M &lt;== /boot/EFI (parted) mkpart p 512M 40G &lt;== / (parted) mkpart p 40G 48G &lt;== swap (parted) mkpart e 48G -1 &lt;== /home 接下来，还需要用合适的文件系统来对每个分区进行格式化操作： # mkfs.vfat sdb1 &lt;== /boot/EFI # mkfs.ext4 sdb2 &lt;== / # mkswap sdb3 &lt;== swap # mkfs.ext4 sdb4 &lt;== home 2.6 挂载分区首先将根分区挂载到 /mnt： # mount /dev/sdb2 /mnt 创建目录并挂载 /boot/EFI： # mkdir /mnt/boot # mkdir /mnt/boot/EFI # mount /dev/sdb1 /mnt/boot/EFI 创建目录并挂载 /home： # mkdir /mnt/home # mount /dev/sdb4 /mnt/home 激活 sdb3 作为交换分区： # swapon /dev/sdb3 参考资料：【１】 ArchLinux官方教程 作者 @Iris2016 年 11 月 27 日","tags":[{"name":"ArchLinux","slug":"ArchLinux","permalink":"http://irislr.me/tags/ArchLinux/"},{"name":"系统安装","slug":"系统安装","permalink":"http://irislr.me/tags/系统安装/"}]}]