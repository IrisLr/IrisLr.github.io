<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>重装 Windows 后的 Hexo 博客环境恢复</title>
      <link href="//posts/86195e20/"/>
      <url>//posts/86195e20/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>由于本人换系统较为频繁，这种操作不止一两次了。<br>这次换系统后，觉得重搭环境麻烦，导致很久都没有更博了。<br>搭完后，发现过程并不复杂，于是记录下来，方便下次。。</p><a id="more"></a><hr><p><strong>环境：</strong> </p><blockquote><p>本地系统：Win7</p></blockquote><hr><h1 id="1-关联-github"><a href="#1-关联-github" class="headerlink" title="1 关联 github"></a>1 关联 github</h1><p>安装 Git<br><a href="https://git-scm.com/" target="_blank" rel="external">下载地址</a>  </p><pre><code>&gt; git config --global user.name &quot;fengyanlover&quot;&gt; git config --global user.email &quot;fengyanlover@gmail.com&quot;</code></pre><p>生产新的 SSH Key 配置，在 Git Bash 执行代码：</p><pre><code>&gt; ssh-keygen -t rsa -C &quot;fengyanlover@gmail.com&quot;</code></pre><p>此步会在用户目录下自动生成 id_rsa 和 id_rsa.pub。<br>将 id_rsa.pub 的内容复制到 github 上即可。 </p><hr><h1 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2 安装 Hexo"></a>2 安装 Hexo</h1><p>进入博客目录，打开 Git Bash<br>安装 Hexo</p><pre><code>&gt; npm install -g hexo&gt; hexo</code></pre><p>基本操作：</p><pre><code>&gt; hexo g&gt; hexo s&gt; hexo d</code></pre><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="http://blog.csdn.net/wx_jin/article/details/51027783" target="_blank" rel="external">Windows下使用Hexo+GithubPage搭建博客</a>  </p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 6 月 26 日 </p>]]></content>
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7 上 PPTP VPN 的搭建</title>
      <link href="//posts/79e47cfb/"/>
      <url>//posts/79e47cfb/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br> 我目前的需求：为了方便调试阿里云上的网站，希望能像访问本地磁盘一样访问云服务器上的程序，达到自动同步的效果。<br>首先，利用 VPN 协议能将两台不同局域网的计算机拉到同一个局域网内。<br>其次，局域网内的文件共享方式大体分三种——FTP、NFS、Samba。FTP 不能实现在线修改；NFS 能同步，但只支持 linux 系统之间的挂载；而 Samba 则能实现 windows 与 linux 之间的同步访问。<br>经过各方面的考虑，最终，我选择了 VPN 与 Samba 协议结合的方式。下面将陆续介绍这两个服务器的搭建步骤。<br>VPN 已经是一个老生常谈的东西了，像各大视频网站上的 VIP 的特权，又像通往个人空间的光速隧道，简单，安全。其中，VPN 搭建的过程中最麻烦最容易出问题的步骤是防火墙的设置，需要特别注意。<br><a id="more"></a></p><hr><p><strong>环境：</strong> </p><blockquote><p>云服务器系统：CentOS7<br>本地系统：Win7</p></blockquote><hr><h1 id="1-检测系统环境"><a href="#1-检测系统环境" class="headerlink" title="1 检测系统环境"></a>1 检测系统环境</h1><h2 id="1-1-是否支持-MPPE-补丁"><a href="#1-1-是否支持-MPPE-补丁" class="headerlink" title="1.1 是否支持 MPPE 补丁"></a>1.1 是否支持 MPPE 补丁</h2><pre><code>$ modprobe ppp-compress-18 &amp;&amp; echo success</code></pre><p>显示 success 说明系统支持 MPPE 补丁，如果不支持，则需要安装 kernel-devel  </p><pre><code>$ sudo yum install kernel-devel</code></pre><h2 id="1-2-是否开启-TUN-TAP-支持"><a href="#1-2-是否开启-TUN-TAP-支持" class="headerlink" title="1.2 是否开启 TUN/TAP 支持"></a>1.2 是否开启 TUN/TAP 支持</h2><pre><code>$ cat /dev/net/tun</code></pre><p>显示结果为下面的文本，则表明通过：</p><pre><code>cat:/dev/net/tun: File descriptor in bad state</code></pre><h2 id="1-3-是否开启ppp支持"><a href="#1-3-是否开启ppp支持" class="headerlink" title="1.3 是否开启ppp支持"></a>1.3 是否开启ppp支持</h2><pre><code>$ cat /dev/ppp</code></pre><p>显示结果为下面的文本，则表明通过：</p><pre><code>cat:/dev/ppp: No such device or address</code></pre><p>上面三条必须同时满足，否则不能安装pptp vpn</p><hr><h1 id="2-关闭SELINUX"><a href="#2-关闭SELINUX" class="headerlink" title="2 关闭SELINUX"></a>2 关闭SELINUX</h1><pre><code>$ sudo vim /etc/selinux/config######################################## 修改SELINUX=disabled</code></pre><p>使配置立即生效：</p><pre><code>$ setenforce 0 </code></pre><hr><h1 id="3-PPTP-的安装和配置"><a href="#3-PPTP-的安装和配置" class="headerlink" title="3 PPTP 的安装和配置"></a>3 PPTP 的安装和配置</h1><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><pre><code>$ sudo yum install -y ppp iptables pptpd</code></pre><h2 id="3-2-参数配置"><a href="#3-2-参数配置" class="headerlink" title="3.2 参数配置"></a>3.2 参数配置</h2><p>配置 PPTP 参数</p><pre><code>$ sudo vim /etc/ppp/options.pptpd##################################ms-dns 8.8.8.8ms-dns 114.114.114.114</code></pre><p>设置 PPTP 客户端用户和密码</p><pre><code>$ sudo vim /etc/ppp/chap-secrets###################################client  server   secret  IP addressesuser     pptpd     pass     *</code></pre><p>设置 PPTP 服务器和客户端的局域网 IP 地址</p><pre><code>$ sudo vim /etc/pptpd.conf##################################localip 192.168.1.1  # 服务器的局域网 IP 地址remoteip 192.168.1.2-254  # 客户端的局域网 IP 地址# 据说这里最后一行需要为空内容..</code></pre><p>修改内核转发参数</p><pre><code>$ sudo vim /etc/sysctl.conf##################################    net.ipv4.ip_forward = 1  #设置为1</code></pre><p>使设置立刻生效</p><pre><code>$ /sbin/sysctl -p</code></pre><hr><h1 id="4-启动-PPTP-服务"><a href="#4-启动-PPTP-服务" class="headerlink" title="4 启动 PPTP 服务"></a>4 启动 PPTP 服务</h1><p>启动pptp</p><pre><code>$ sudo systemctl start pptpd.service</code></pre><p>查看pptp状态</p><pre><code>$ sudo systemctl status pptpd.service</code></pre><p>设置开机启动</p><pre><code>$ sudo systemctl enable pptpd.service</code></pre><hr><h1 id="5-修改防火墙规则"><a href="#5-修改防火墙规则" class="headerlink" title="5 修改防火墙规则"></a>5 修改防火墙规则</h1><h2 id="5-1-关闭默认防火墙启-用-iptables-防火墙"><a href="#5-1-关闭默认防火墙启-用-iptables-防火墙" class="headerlink" title="5.1 关闭默认防火墙启 用 iptables 防火墙"></a>5.1 关闭默认防火墙启 用 iptables 防火墙</h2><p><strong>关闭 firewall</strong></p><p>停止firewall：</p><pre><code>$ sudo systemctl stop firewalld.service</code></pre><p>禁止firewall开机启动：</p><pre><code>$ sudo systemctl disable firewalld.service</code></pre><p>查看默认防火墙状态（关闭后显示 notrunning，开启后显示 running）</p><pre><code>$ sudo firewall-cmd --state</code></pre><p><strong>关闭 iptables</strong></p><p>安装 iptables 防火墙：</p><pre><code>$ sudo yum install -y iptables</code></pre><p>启动防火墙：</p><pre><code>$ sudo systemctl start iptables.service</code></pre><p>设置防火墙开机启动：</p><pre><code>$ sudo systemctl enable iptables.service</code></pre><h2 id="5-2-修改防火墙规则文件"><a href="#5-2-修改防火墙规则文件" class="headerlink" title="5.2 修改防火墙规则文件"></a>5.2 修改防火墙规则文件</h2><p>主要是添加1723端口和gre协议，并添加 nat 转发，配置规则如下：</p><pre><code>$ sudo vim /etc/sysconfig/iptables################################### sample configuration for iptables service# you can edit this manually or use system-config-firewall# please do not ask us to add additional ports/services to this default configuration*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW,RELATED,ESTABLISHED -m tcp --dport 22 -jACCEPT-A INPUT -p tcp -m state --state NEW,RELATED,ESTABLISHED -m tcp --dport 1723 -jACCEPT-A INPUT -p gre -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A FORWARD -i ppp+ -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT-A FORWARD -m state --state INVALID -j DROP-A OUTPUT -m state --state INVALID -j DROPCOMMIT*nat:PREROUTING ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A POSTROUTING -s 192.168.1.1/24 -o eth0 -j MASQUERADECOMMIT</code></pre><p>还需将 nat 转发添加到 local 文件中：</p><pre><code>$ sudo vim /etc/rc.d/rc.local##################################iptables -t nat -A POSTROUTING -s 192.168.1.1/24 -o eth0 -j MASQUERADE</code></pre><p>重启iptables使得规则生效</p><pre><code>$ sudo systemctl restart iptables.service</code></pre><p>查看路由表及iptables规则</p><pre><code>$ iptables -t nat -L$ iptables -t filter -L</code></pre><p>加载iptables模块</p><pre><code>$ sudo modprobe ip_nat_pptp$ sudo modprobe ip_conntrack_pptp</code></pre><p>查看模块是否加载</p><pre><code>$ lsmod|grep pptp</code></pre><h1 id="6-测试"><a href="#6-测试" class="headerlink" title="6 测试"></a>6 测试</h1><p>安装net-tools，查看1723端口</p><pre><code>$ sudo yum install -y net-tools$ sudo netstat -nap | grep 1723 | grep pptpd</code></pre><p>win7 连接 VPN 后发现无法上网，解决方法在<a href="http://jingyan.baidu.com/article/dca1fa6f438a65f1a44052b0.html" target="_blank" rel="external">这里</a>。</p><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="http://mannerwang.blog.51cto.com/12009183/1854931/" target="_blank" rel="external">Centos 7 配置PPTP VPN攻略</a><br><strong>【２】</strong><a href="http://www.linuxidc.com/Linux/2015-05/117473.htm" target="_blank" rel="external">CentOS 7.0关闭默认防火墙启用iptables防火墙</a><br><strong>【３】</strong><a href="http://jingyan.baidu.com/article/dca1fa6f438a65f1a44052b0.html" target="_blank" rel="external">连接VPN后不能上网的解决办法</a>  </p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 6 月 22 日 </p>]]></content>
      
      <categories>
          
          <category> Internet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树莓派上Node.js和MongoDB的安装</title>
      <link href="//posts/19738ae3/"/>
      <url>//posts/19738ae3/</url>
      <content type="html"><![CDATA[<a id="more"></a><hr><p><strong>环境：</strong> </p><blockquote><p>Raspberry pi：3B+<br>树莓派 OS：Raspbian<br>Node.js：v7.1.0<br>npm：3.10.9<br>mongoDB：  </p></blockquote><hr><h1 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1 安装 Node.js"></a>1 安装 Node.js</h1><p>总的来说，Node.js 在 linux 下有四种安装方法。<br>第一种是利用 apt 从源中直接获取安装，但用这种方法获得的版本往往很旧；<br>第二种是下载官网打包好的 deb 安装包，用 dpkg 进行安装，但官网并没有提供树莓派的版本。最接近的有 ubuntu 和 debian 版本，基于 x86_64 ，树莓派需要的是 arm7l ，也只能望而却步。<br>第三种是手动编译 Node.js 官网提供的源码，这种方式虽然麻烦点，但却是获取最新版本的唯一途径。而事实证明，适合的比最新的好用……<br>第四种方法，下载官网已经编译好的包，解压后简单配置下就能用，重要的是版本一定要找对！<br>在树莓派上，上面这四种方法我都一一试过了，从编译源码解决各种依赖，到找 deb 包找到生无可恋，再到已编译包各种版本之间的徘徊不前。所以，笔者要告诉每一个看到这篇博文的你，为了少走弯路，优先尝试第四种方式！<br>废话不多说，下面介绍方法四的步骤：<br>首先，如何选择适合我们系统的版本呢？<br>到<a href="http://nodejs.org/dist/" target="_blank" rel="external">这里</a>可以看到所有的版本，令人眼花缭乱。不过没关系，在选择版本的过程中，只需要记住两点，一是系统内核，二是系统发布时间。这两个信息可以通过一条命令获得，如下：</p><pre><code>$ uname -a</code></pre><p>版本选好后，可以选择 wget 下载，也可以先在自己电脑上下载好再传过去。我选择的是后者，因为 IDM 快很多……<br>解压：</p><pre><code>$ tar -xf node-vX.X.X-linux-armvXl.tar.xz</code></pre><p>安装：</p><pre><code>$ sudo mv node-vX.X.X-linux-armvXl /usr/local/node</code></pre><p>最后建个硬链接，和添 path 路径是一个效果：</p><pre><code>$ cd /usr/local/bin$ sudo ln -s /usr/local/node/bin/node node$ sudo ln -s /usr/local/node/bin/npm npm</code></pre><p>测试：</p><pre><code>$ node -v$ npm -v</code></pre><p>成功！</p><hr><h1 id="2-安装-Serialport"><a href="#2-安装-Serialport" class="headerlink" title="2 安装 Serialport"></a>2 安装 Serialport</h1><pre><code>$ sudo npm install serialport --unsafe-perm --build-from-source</code></pre><hr><h1 id="3-安装-MongoDB"><a href="#3-安装-MongoDB" class="headerlink" title="3 安装 MongoDB"></a>3 安装 MongoDB</h1><pre><code>$ sudo apt-get install mongodb-server -y$ sudo mkdir -p /data/db$ sudo service mongodb start</code></pre><p>测试：</p><hr><h1 id="4-在-Node-js-中使用-MongoDB"><a href="#4-在-Node-js-中使用-MongoDB" class="headerlink" title="4 在 Node.js 中使用 MongoDB"></a>4 在 Node.js 中使用 MongoDB</h1><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="https://github.com/nebrius/raspi-io/wiki/Getting-a-Raspberry-Pi-ready-for-NodeBots" target="_blank" rel="external">Getting a Raspberry Pi ready for NodeBots</a><br><strong>【２】</strong><a href="https://github.com/EmergingTechnologyAdvisors/node-serialport#raspberry-pi-linux" target="_blank" rel="external">EmergingTechnologyAdvisors/node-serialport</a><br><strong>【３】</strong><a href="http://raspberrypituts.com/nodejs-mongodb-web-server-raspberry-pi-tutorial/" target="_blank" rel="external">NodeJS + MongoDB Web Server Raspberry Pi Tutorial</a>  </p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 3 月 22 日 </p>]]></content>
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry pi </tag>
            
            <tag> Node.js </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅谈树莓派的初始设置</title>
      <link href="//posts/dd7b0567/"/>
      <url>//posts/dd7b0567/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>树莓派，一个美丽与神奇并存的小电脑，易学，好玩。<br>可以给爱好者提供日常所需，也可以被 Geek 玩出新科技。<br>怎么说我也算得上半个 Geek 吧，不玩玩树莓派多遗憾……哈哈，现在就开始吧！</p><a id="more"></a><hr><p><strong>环境：</strong> </p><blockquote><p>Raspberry pi：3B+<br>树莓派 OS：Raspbian<br>本地系统：Windows 10  </p></blockquote><hr><h1 id="1-烧写系统"><a href="#1-烧写系统" class="headerlink" title="1 烧写系统"></a>1 <a href="https://www.howtoforge.com/tutorial/howto-install-raspbian-on-raspberry-pi/" target="_blank" rel="external">烧写系统</a></h1><p><strong>第一步</strong>，进<a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="external">官网</a>下载 Raspbian 系统。<br><strong>第二步</strong>，安装烧写软件 Win32DiskImager ，然后选择相应的 SD 卡和镜像，点击 <code>write</code>，等上个 10 来分钟即可。<br><strong>第三步</strong>，连上显示器，进入系统。<br><strong>第四步</strong>，对于 99% 的人，进系统后的第一件事就是连网吧！<br>连无线好说，连设置为 dhcp 的路由器也好说，毕竟 Raspbain 默认就有很好的图形化界面。<br>至于连接需要设置 IP 的有线，我采用的是下面的方法：<br>进入 /etc/network</p><pre><code>$ cd /etc/network$ sudo nano interfaces---------------------添加：addressnetmask gateway</code></pre><p>连好网后，就来装个 vim 吧。原因？—— 熟悉。</p><h1 id="2-解锁-root-账户"><a href="#2-解锁-root-账户" class="headerlink" title="2 解锁 root 账户"></a>2 解锁 root 账户</h1><p>进入系统的默认用户 pi，密码是 raspberry。<br>由于初始系统的 root 用户是被锁定的，如果装完系统后不做这一步，以后出了些什么问题的话解决起来就有点麻烦了。<br>我在这点上还是深有体会的……<br>曾经因为改错了 sudoer 文件，pi 下的 sudo 命令用不了了，由于之前没有解锁 root ，那个时候想解锁也不可能（因为解锁需要 sudo ）。当时想着，这个系统基本是没法用了吧，要重装吗？——别啊，里面装了好多东西呢，一定会有解决方法的……后来，几经周折，把 SD<br>卡通过读卡器在另一个树莓派的系统上改过来的。其实也不一定要是树莓派，只要有个 linux 系统就行，不过我没有。庆幸当时手上还有个树莓派啊。<br>所以，要是提前解锁了 root 不就啥事儿都没有了吗？<br>执行下面的命令设置 root 密码，会提示输入两次：</p><pre><code>$ sudo passwd root</code></pre><p>解锁：</p><pre><code>$ sudo passwd --unlock root</code></pre><p>现在，输入：</p><pre><code>$ su</code></pre><p>然后输入刚设置的密码，即可进入 root 账户！</p><hr><h1 id="3-远程操作树莓派"><a href="#3-远程操作树莓派" class="headerlink" title="3 远程操作树莓派"></a>3 远程操作树莓派</h1><p>在我的电脑上，用于对树莓派进行远程操作的有3个软件。<br>其中，<strong>Putty</strong> 和 <strong>WinSCP</strong> 用的是 SSH 协议，树莓派的 Raspbian 系统是自动开启 SSH 服务的，所以我们不需要进行额外的配置。连上网得到其 IP 地址就能连。<br>用 Putty 进命令行控制树莓派，是我最喜欢的方式——黑色的框框，独立于世。<br>用 WinSCP 与服务器交换文件，很方便。<br>如果想在自己电脑上进树莓派的图形桌面，上面两个软件是满足不了你的。<br>这时 <strong>TightVNCViewer</strong> 就派上用场了！<br>得到了 IP 地址还不够，我们要在树莓派上<strong>配置 VNC 服务</strong>，如下——<br>安装 tightvncserver：</p><pre><code>$ sudo apt-get update$ sudo apt-get install tightvncserver</code></pre><p>配置连接密码：</p><pre><code>$ tightvncserver</code></pre><p>设置开机自启：</p><pre><code>$ wget http://www.penguintutor.com/otherfiles/tightvncserver-init.txt$ sudo mv tightvncserver-init.txt /etc/init.d/tightvncserver$ sudo chown root:root /etc/init.d/tightvncserver$ sudo chmod 755 /etc/init.d/tightvncserver$ sudo update-rc.d tightvncserver defaults$ sudo /etc/init.d/tightvncserver start $ reboot</code></pre><hr><h1 id="4-更换源"><a href="#4-更换源" class="headerlink" title="4 更换源"></a>4 更换源</h1><p>这个可以参考这篇<a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="external">博文</a>，但我按照他的方法更换源后，安装有些软件的时候会提示找不到，于是我又换回官方源了，虽然慢点，但至少有啊…… </p><hr><h1 id="5-安装-Firefox"><a href="#5-安装-Firefox" class="headerlink" title="5 安装 Firefox"></a>5 安装 Firefox</h1><pre><code>$ sudo apt-get update$ sudo apt-get install iceweasel</code></pre><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="https://www.howtoforge.com/tutorial/howto-install-raspbian-on-raspberry-pi/" target="_blank" rel="external">Raspberry Pi Basics: installing Raspbian and getting it up and running</a><br><strong>【２】</strong><a href="http://qqhack8.blog.163.com/blog/static/114147985201532072924213/" target="_blank" rel="external">树莓派2代无显示器安装系统(固定IP+VNC开机自启动)</a><br><strong>【３】</strong><a href="https://my.oschina.net/menghaoqi/blog/760817" target="_blank" rel="external">树莓派 ( Raspberry pi ) 安装火狐浏览器</a>  </p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 3 月 18 日 </p>]]></content>
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry pi </tag>
            
            <tag> RASPBIAN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用 SSH 远程登录 VPS 的初尝试</title>
      <link href="//posts/a409b975/"/>
      <url>//posts/a409b975/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>最近在<a href="https://www.qcloud.com" target="_blank" rel="external">腾讯云</a>上注册了 1 元学生特惠（云服务器＋域名）。为了以后能一起愉快的玩耍，首先要学会远程登录，然后还要进行一些必要的配置。</p><a id="more"></a><hr><p><strong>环境：</strong>  </p><blockquote><ul><li>本地系统：Linux 4.8.10-1-ARCH linux x64</li><li>VPS 系统 1：CentOS 6.5 64bits  </li><li>VPS 系统 2：Ubuntu 16.04.1 LTS 64bits  </li></ul></blockquote><hr><h1 id="1-登录-CentOS"><a href="#1-登录-CentOS" class="headerlink" title="1 登录 CentOS"></a>1 登录 CentOS</h1><h2 id="1-1-通过公网-IP-登录-VPS"><a href="#1-1-通过公网-IP-登录-VPS" class="headerlink" title="1.1 通过公网 IP 登录 VPS"></a>1.1 通过公网 IP 登录 VPS</h2><pre><code>$ ssh root@公网 IP</code></pre><p>输入 root 密码后即可以 root 身份进入系统。</p><h2 id="1-2-创建普通用户"><a href="#1-2-创建普通用户" class="headerlink" title="1.2 创建普通用户"></a>1.2 <a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-centos-quickstart" target="_blank" rel="external">创建普通用户</a></h2><p>添加用户和密码：</p><pre><code># adduser USERNAME# passwd USERNAME </code></pre><p>添加 sudo 功能：</p><pre><code># visudo-------------------添加：USERNAME ALL=(ALL) ALL</code></pre><p>切换至新用户：</p><pre><code># su - USERNAME </code></pre><p>更新下，</p><pre><code>$ sudo yum -y update</code></pre><h1 id="2-登录-Ubuntu"><a href="#2-登录-Ubuntu" class="headerlink" title="2 登录 Ubuntu"></a>2 登录 Ubuntu</h1><h2 id="2-1-远程登录"><a href="#2-1-远程登录" class="headerlink" title="2.1 远程登录"></a>2.1 远程登录</h2><p>同样是：</p><pre><code>$ ssh ubuntu@公网 IP   </code></pre><p>遇到错误。。。根据错误提示信息，解决方法如下：</p><pre><code>$ rm ~/.ssh/hnown_hosts</code></pre><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-centos-quickstart" target="_blank" rel="external">How To Create a Sudo User on CentOS [Quickstart]</a><br><strong>【２】</strong><a href="https://cnzhx.net/blog/using-terminal-ssh-logon-vps/" target="_blank" rel="external">使用 Linux 终端 SSH 登录 VPS</a>  </p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 1 月 25 日 </p>]]></content>
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> VPS </tag>
            
            <tag> SSH </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ArchLinux的问题集锦（持续更新）</title>
      <link href="//posts/d5332367/"/>
      <url>//posts/d5332367/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>不管使用什么系统，总会遇到一些令人头疼的问题。<br>在这篇文章中，会记录一些笔者平时遇到的棘手问题，并且会长期更新。<br>而<strong>记录</strong>的目的则在于——当我们再次见面，也许能笑着说一句“好久不见”…… </p><a id="more"></a><hr><h1 id="1-openssh-故障"><a href="#1-openssh-故障" class="headerlink" title="1 openssh 故障"></a>1 openssh 故障</h1><p>openssh 之前一直在用，但是最近出毛病了，如下：</p><pre><code>$ ssh####################ssh: error while loading shared libraries: libldns.so.2: cannot open shared object file: No such file or directory</code></pre><p>提示缺少 libldns.so.2 。</p><p>先后尝试了两种解决方法，最后有用的还是更新 Pacman 软件包:</p><pre><code>$ sudo pacman -Syu</code></pre><hr><p><strong>参考资料：</strong>    </p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 1 月 24 日 </p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ1002-487-3279</title>
      <link href="//posts/605d4c67/"/>
      <url>//posts/605d4c67/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>首先我要说，这种类似的题我至少做过三道以上，而且无一不是以 <code>TLE</code> 告结。这一“离奇悬案”一直以来也算是心头一大疙瘩，如今能在这么闲暇的时刻再次相遇，也只能用缘分解释了Ｏ（∩＿∩）Ｏ哈哈～<br>在破解本案后，你只需要记住一句话——大数据的输入效率不容忽视！  </p><a id="more"></a><hr><h1 id="1-思路理顺"><a href="#1-思路理顺" class="headerlink" title="1 思路理顺"></a>1 思路理顺</h1><p>首先，对问题先做个简化处理。忽略字符串中的 <code>-</code> ，将所有的字母转换成对应的数字，将每个电话号码字符串转换成一个７位或以下的数字，小 case ！<br>接下来，我们需要两个大数组。一个大小是 10000000 ，负责存储号码出现的次数，对应的数组下标就是拥有该次数的号码；另一个大小为 50000 ，依次存储出现次数为一次以上的号码，最后用 <code>sort</code> 对它进行排序输出即可。<br>上面这种做法算是典型的利用空间来换取时间吧，反正目前为止还没遇到过空间超出的 <code>DC</code> ……</p><hr><h1 id="2-调试技巧"><a href="#2-调试技巧" class="headerlink" title="2 调试技巧"></a>2 调试技巧</h1><p><strong>第一次</strong>修改是因为下面这个样例：  </p><blockquote><ul><li>2</li><li>0000000</li><li>0000000</li></ul></blockquote><p>于是改了输出格式， <code>printf</code> 很给力！  </p><p><strong>第二次</strong>修改是因为输出的应该是 <code>No duplicates.</code> 而不是 <code>No duplicates</code> ……  </p><p><strong>最后</strong>，一直报 <code>TLE</code> 的错误，对算法效率分析了很久，感觉凭自己的能力没办法再优化了。感谢搜索引擎的强大功力，感谢这篇<a href="http://www.cnblogs.com/bestDavid/p/POJ1002PhoneNUM.html" target="_blank" rel="external">博文</a>，让我意识到一直被忽略的输入效率。</p><hr><h1 id="3-源代码（C＋＋）"><a href="#3-源代码（C＋＋）" class="headerlink" title="3 源代码（Ｃ＋＋）"></a>3 源代码（Ｃ＋＋）</h1><pre><code>#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#define MAX1 10000000#define MAX2 50000using namespace std;int r1[MAX1] = {0}; // 号码出现的次数int r2[MAX2];       // 出现次数为一次以上的号码char tmpStr[MAX2];  // 临时存储输入数组int main(){    int n, s, num, k = 0;    cin &gt;&gt; n;    for(int i = 0; i &lt; n; i++){        s = 0;        scanf(&quot;%s&quot;, tmpStr);        for(int i = 0; tmpStr[i] != &apos;\0&apos;; i++){            if(tmpStr[i] != &apos;-&apos;){                if(tmpStr[i] &gt;= &apos;A&apos; &amp;&amp; tmpStr[i] &lt;= &apos;P&apos;)                    num = (int)(tmpStr[i] - &apos;A&apos;) / 3 + 2;                else if(tmpStr[i] &gt;= &apos;R&apos; &amp;&amp; tmpStr[i] &lt;= &apos;Y&apos;)                    num = (int)(tmpStr[i] - &apos;A&apos; - 1) / 3 + 2;                else                    num = tmpStr[i] - 48;                s = s * 10 + num;            }        }        r1[s]++;        if(r1[s] == 2){            r2[k++] = s;        }    }    sort(r2, r2 + k);    for(int i = 0; i &lt; k; i++)        printf(&quot;%03d-%04d %d\n&quot;, r2[i] / 10000, r2[i] % 10000, r1[r2[i]]);    if(k == 0)        cout &lt;&lt; &quot;No duplicates.&quot; &lt;&lt; endl;    return 0;}</code></pre><hr><h1 id="4-经验＋"><a href="#4-经验＋" class="headerlink" title="4 经验＋"></a>4 经验＋</h1><p>大数据的输入会很占时间，<code>scanf</code> 、 <code>gets</code> 比 <code>cin</code> 快！！！  </p><p><code>C</code> 与 <code>C++</code> 头文件混搭的情况下 <code>G++</code> 会报编译错误，选择 <code>C++</code> 编译就没问题！！！  </p><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="http://www.cnblogs.com/bestDavid/p/POJ1002PhoneNUM.html" target="_blank" rel="external">大卫david　POJ1002 487-3279</a><br><strong>【２】</strong><a href="http://poj.org/problem?id=1002&amp;lang=zh-CN&amp;change=true" target="_blank" rel="external">487-3279</a>  </p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 1 月 19 日 </p>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
            <tag> POJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ1001-求高精度幂</title>
      <link href="//posts/f52fb2ab/"/>
      <url>//posts/f52fb2ab/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>高精度问题——包括高精度加减法、高精度乘除法、高精度幂等。其中，高精度幂的实现中包含了高精度和与高精度乘的精髓。显然，最直接的解题方法就是模拟人的手算过程，有小学底子就行。<br>这一类题的特点是算法过程通俗易懂，但是实现起来必须很谨慎，因为一个细节可能就得赔上半天时间，本人在调试过程中算是深有体会了……<br>在成功做完<a href="http://poj.org/problem?id=1001&amp;lang=zh-CN&amp;change=true" target="_blank" rel="external">本题</a>后，你会发现，最花时间规条最多的不是大数相乘和相加的实现，而是小数点位置以及特殊情况的考虑。  </p><a id="more"></a><hr><h1 id="1-思路理顺"><a href="#1-思路理顺" class="headerlink" title="1 思路理顺"></a>1 思路理顺</h1><p><strong>输入如何接收并处理？</strong><br>定义两个 <code>string</code> 类型的变量，用于进行接收，然后转存到 <code>vector</code> 容器中，同时记录小数点的位置并删除之。<br><strong>注：</strong>之所以选择 <code>vector</code> ，是因为 <code>vector</code> 自带 <code>size</code> 属性，而且不必涉及内存分配的问题，否则定义一个结构体也可以。   </p><p><strong>幂计算过程？</strong><br>完全模拟手算过程。<br>定义两个 vector 变量，一个存储当前乘数，一个存储当前相乘临时结果。<br>其中，这一轮的临时结果成为下一轮的一个乘数，因此要进行循环赋值操作。</p><p><strong>数据的存储方式？</strong><br>考虑到手算过程是从后往前算的，而且计算没有结束之前是无法确定结果位数的，因此中间变量大数和最终结果大数一律选择倒着存储。  </p><p><strong>如何输出？</strong><br>输出之前，有两个 <code>tips</code> 需要处理，一是前导后导去零，二是定位小数点位置。<br>最后的结果在 <code>vector</code> 里面，并且是倒着的，因此要倒着输出。  </p><p><strong>特殊情况？</strong><br>对题目进行“咬文嚼字”，尽量试验边沿情况，找出错误的输入。找出错误后就好解决了！</p><hr><h1 id="2-调试技巧"><a href="#2-调试技巧" class="headerlink" title="2 调试技巧"></a>2 调试技巧</h1><p>如果了解了本题的基本解法，过样例是很容易的事。<br>关键的是下面几种特殊情况：</p><blockquote><ul><li>98.999  1</li><li>0.0010  3</li><li>10.000  1</li></ul></blockquote><p>一般，样例＋上面3个能通过的话，基本就没啥大问题了！</p><hr><h1 id="3-源代码（C＋＋）"><a href="#3-源代码（C＋＋）" class="headerlink" title="3 源代码（Ｃ＋＋）"></a>3 源代码（Ｃ＋＋）</h1><pre><code>#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#define MAX 500using namespace std;vector&lt;int&gt; R;  // 基数// 幂计算过程，完全模拟手算vector&lt;int&gt; myProb(vector&lt;int&gt; a){    int b[MAX] = {0};    int tmp, c, k;    for(int i = 0; i &lt; 5; i++){        c = 0;        for(int j = 0; j &lt; a.size(); j++){            k = i + j;            tmp = R[i] * a[j] + c + b[k];                    c = tmp / 10;            b[k] = tmp % 10;        }        if(c)   b[++k] = c;    }    // 因为上面用 vector 需要有时候是 push_back 而有时候又是直接赋值，    // 所以选择先用数组存着，后面再做转化。可谓 vector     // 实现了动态分配内存，而又不可避免要面对这种问题。    vector&lt;int&gt; rb;    for(int i = 0; i &lt;= k; i++)        rb.push_back(b[i]);    return rb;}int main(){    int n;    string tmpR, tmpn;  // 临时接收    while(cin &gt;&gt; tmpR &gt;&gt; tmpn){        int point;        R.clear();  // 必须清空        // 处理基数 R        for(int i = 0; i &lt;= 5; i++){            if(tmpR[i] == &apos;.&apos;)  point = 5 - i;  // 记录小数位数            else    R.push_back(tmpR[i] - 48);  // 将除小数点外的数字一一写进数组中        }        reverse(R.begin(), R.end());    // 翻转        // 计算指数ｎ        n = 0;        for(int i = 0; i &lt; tmpn.length(); i++)            n = n * 10 + tmpn[i] - 48;        point = point * n;  // 计算结果的小数位数        // 幂乘        vector&lt;int&gt; r1, r2;        r1 = R; // 将 r1 的初值设为 R ，是因为在 n = 1 的情况下，不会进入下面的循环，最后结果即为基数 R        for(int i = 0; i &lt; n - 1; i++){            r2 = myProb(r1);            r1 = r2;        }        //输出        int tmp = 0;    // tmp 是去除后导 0 后的终点位置        while(!r1[tmp] &amp;&amp; tmp &lt; point) tmp++;   // 由于10.000  1 的特例输出应为 10，加了 tmp &lt; point        if(tmp == r1.size())    cout &lt;&lt; 0;        for(int i = r1.size() - 1; i &gt;= tmp; i--){            // 唯一需要去除前导 0 的情况是——基数为零点几几，因此加入下句判断即可            if(i == r1.size() - 1 &amp;&amp; i == point &amp;&amp; r1[i] == 0)    continue;            if(i == point - 1)  cout &lt;&lt; &apos;.&apos;;    // 插入小数点            cout &lt;&lt; r1[i];        }        cout &lt;&lt; endl;    }    return 0;}</code></pre><h1 id="4-经验＋"><a href="#4-经验＋" class="headerlink" title="4 经验＋"></a>4 经验＋</h1><p><strong>string の 用法</strong><br><code>cin &gt;&gt; string</code> 以空格结束。 </p><p><strong>reverse の 用法</strong>  </p><pre><code>#include &lt;algorithm&gt;reserve(begin, end);</code></pre><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="http://blog.csdn.net/alongela/article/details/6788237" target="_blank" rel="external">POJ1001 高精度乘法</a><br><strong>【２】</strong><a href="http://poj.org/problem?id=1001&amp;lang=zh-CN&amp;change=true" target="_blank" rel="external">求高精度幂</a>  </p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 1 月 18 日 </p>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
            <tag> POJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim的优化</title>
      <link href="//posts/2209c94b/"/>
      <url>//posts/2209c94b/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>之前研究过 Ubuntu 下的 Vim 优化，那个貌似简单很多，毕竟什么基本设置都有，稍微删几个注释符或者修改几个参数就好了。在 Archlinux 下貌似没这么简单？<br>什么颜色搭配风格啊，自动缩进啊，代码识别和高亮啊。恩，还有括号匹配！<br>说实话，这些问题不解决，敲代码都很费时费力呢！停……这表示我换上这个系统以来都没规规矩矩の码过字啊，这么久了都没想过优化优化 wuli 可爱的 Vim ？<br>估计装了这个系统后就一直在忙考试，而没时间整这些，惭愧惭愧。</p><a id="more"></a><hr><p><strong>环境：</strong> </p><blockquote><p>系统：Linux 4.8.10-1-ARCH linux x64</p></blockquote><hr><h1 id="1-颜色配置"><a href="#1-颜色配置" class="headerlink" title="1 颜色配置"></a>1 颜色配置</h1><p>关于配色，我依旧钟情于 Solarized 的配色方案。它的 dark backgroud ，时尚而不失真诚，优雅却不乏热情。<br>开始吧！首先，先新建几个必要的文件夹  </p><pre><code>$ mkdir ~/.vim$ mkdir ~/.vim/colors </code></pre><p>接着，去官网提供的 github 托管<a href="https://github.com/altercation/vim-colors-solarized" target="_blank" rel="external">地址</a>，咱也不忙着下载，先去看看 readme ！<br>有优雅的下载方式等着我们呢！  </p><pre><code>$ cd ~/Download$ git clone git://github.com/altercation/vim-colors-solarized.git$ cd vim-colors-solarized/colors$ mv solarized.vim ~/.vim/colors/</code></pre><p>配色文件放好后，后面就要修改 .vimrc ，来将配色主题设置进去了：</p><pre><code>$ vim ~/.vimrc####################在后面添加：&quot;打开语法高亮，显示行号set nu!colorscheme desertsyntax enablesyntax on&quot;设置配色set background=darkcolorscheme solarized</code></pre><p>打开语法高亮，以便正确显示。<br>重启使 Vim 生效后，发现 gvim 能正常显示，而 vim 的色调却阴阳怪气的，这是因为 Vim 配色与 Terminal的配色发生混叠的结果。<br>既然如此，将 <code>set background=dark</code> 改为：</p><pre><code>if has(&apos;gui_running&apos;)    set background=lightelse    set background=darkendif</code></pre><p>重启看看效果吧！</p><hr><h1 id="2-括号自动补全"><a href="#2-括号自动补全" class="headerlink" title="2 括号自动补全"></a>2 <a href="https://blog.oldj.net/2011/06/17/vim-parenthesis/" target="_blank" rel="external">括号自动补全</a></h1><p>很多现代 IDE 都有自动补全配对括号的功能，比如输入了左括号“(”，IDE 就自动在后面添加一个对应的右括号“)”，并且将光标移到括号中间。Vim 虽然没有直接提供这个功能，但要实现其实非常简单，只要在你的 .vimrc 文件中添加下面的内容就可以了：</p><pre><code>$ vim ~/.vimrc####################在后面添加匹配括号：inoremap ( ()&lt;LEFT&gt;inoremap [ []&lt;LEFT&gt;inoremap { {}&lt;LEFT&gt;</code></pre><p>原理很简单，就是将左括号的键映射为一个新的操作，在输入左括号时，让 Vim 立刻输入右括号，同时再将光标左移一格到括号中间。<br>另外，在自动补全了右括号之后，如果用户再输入右括号会怎么样呢？一般来说，比较合理的做法似乎是忽略掉这个后输入的多余的右括号，直接将光标向右移到一格。代码如下：</p><pre><code>&quot; 输入的前一个字符是左括号时时，如果后一个字符是右括号，则删除它，避免出现重复字符function! RemoveNextDoubleChar(char)    let l:line = getline(&quot;.&quot;)    let l:next_char = l:line[col(&quot;.&quot;)]        &quot; 取得当前光标后一个字符    if a:char == l:next_char        execute &quot;normal! l&quot;    else        execute &quot;normal! i&quot; . a:char . &quot;&quot;    endendfunctioninoremap ) &lt;ESC&gt;:call RemoveNextDoubleChar(&apos;)&apos;)&lt;CR&gt;ainoremap ] &lt;ESC&gt;:call RemoveNextDoubleChar(&apos;]&apos;)&lt;CR&gt;ainoremap } &lt;ESC&gt;:call RemoveNextDoubleChar(&apos;}&apos;)&lt;CR&gt;a</code></pre><hr><h1 id="3-自动缩进"><a href="#3-自动缩进" class="headerlink" title="3 自动缩进"></a>3 自动缩进</h1><p>换行时需要根据语法规则进行自动缩进。并且按照习惯，将 <code>tab</code> 的缩进定义成 4 格：</p><pre><code>$ vim ~/.vimrc####################在后面添加：&quot;设置tab为缩进４格set ts=4set sw=4&quot;自动缩进set expandtabset autoindent</code></pre><hr><h1 id="4-gvim-菜单栏与工具栏隐藏与显示动态切换"><a href="#4-gvim-菜单栏与工具栏隐藏与显示动态切换" class="headerlink" title="4 gvim 菜单栏与工具栏隐藏与显示动态切换"></a>4 <a href="http://liyanrui.is-programmer.com/posts/1791.html" target="_blank" rel="external">gvim 菜单栏与工具栏隐藏与显示动态切换</a></h1><p>新建 .gvimrc ，并添加内容：</p><pre><code>$ vim ~/.gvimrc####################添加：&quot;Toggle Menu and Toolbarset guioptions-=mset guioptions-=Tmap &lt;silent&gt; &lt;F2&gt; :if &amp;guioptions =~# &apos;T&apos; &lt;Bar&gt;        \set guioptions-=T &lt;Bar&gt;        \set guioptions-=m &lt;bar&gt;    \else &lt;Bar&gt;        \set guioptions+=T &lt;Bar&gt;        \set guioptions+=m &lt;Bar&gt;    \endif&lt;CR&gt;</code></pre><p>再次启动 gvim 时，菜单栏与工具栏默认是隐藏的，这样可以充分利用窗口空间，使其显示更多的文本内容。<br>在必要时，可使用 F2 键呼出菜单栏/工具栏；待不使用时，用 F2 键将其关闭。</p><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="http://www.cnblogs.com/tsingke/p/3820672.html" target="_blank" rel="external">Vim以及Terminal 配色方案—“Solarized”配色</a><br><strong>【２】</strong><a href="https://blog.oldj.net/2011/06/17/vim-parenthesis/" target="_blank" rel="external">VIM中括号的自动补全与删除</a><br><strong>【３】</strong><a href="http://liyanrui.is-programmer.com/posts/1791.html" target="_blank" rel="external">gvim 菜单栏与工具栏隐藏与显示动态切换</a>  </p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 1 月 15 日 </p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spark+Hadoop+JDK+Scala 的环境搭建</title>
      <link href="//posts/f1af8126/"/>
      <url>//posts/f1af8126/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>心血来潮，最近准备开始学习一直以来心心念念的云计算。说来，人也确实是个奇怪的物种，越是觉得高深的东西，越是想去了解它，征服它……<br>云计算，核心是分布式计算。鄙人的浅显理解就是——通过协调多硬件的新型算法来弥补传统算法在大数据领域的缺陷。<br>实践为先，那么，从搭建环境开始吧！</p><a id="more"></a><hr><p><strong>环境：</strong>  </p><blockquote><p>系统：Linux 4.8.10-1-ARCH linux x64<br>JDK：java 1.7.0_111<br>Hadoop：hadoop-2.7.3<br>Spark：spark-2.1.0-bin-hadoop2.7<br>Scala：scala-2.11.8</p></blockquote><hr><h1 id="1-安装-JDK"><a href="#1-安装-JDK" class="headerlink" title="1 安装 JDK"></a>1 安装 JDK</h1><p>参照<a href="https://wiki.archlinux.org/index.php/java" target="_blank" rel="external">官方</a>给出的安装方法即可。<br>安装 JDK1.7 ——</p><pre><code>$ sudo pacman -S jdk7-openjdk</code></pre><p>查看具体版本</p><pre><code>$ java -versionjava version &quot;1.7.0_111&quot;OpenJDK Runtime Environment (IcedTea 2.6.7) (Arch Linux build 7.u111_2.6.7-1-x86_64)OpenJDK 64-Bit Server VM (build 24.111-b01, mixed mode)</code></pre><hr><h1 id="2-安装-Hadoop"><a href="#2-安装-Hadoop" class="headerlink" title="2 安装 Hadoop"></a>2 安装 Hadoop</h1><p>很不幸，<a href="https://wiki.archlinux.org/index.php/Hadoop_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">官方 wiki</a> 给出的方法最终以失败告终。</p><pre><code>$ sudo yaourt -S hadoop-----------------------...==&gt; Edit PKGBUILD with:  /usr/lib/yaourt/util.sh: line 227: PKGBUILD: command not found==&gt; ERROR: Running makepkg as root is not allowed as it can cause permanent,catastrophic damage to your system.==&gt; ERROR: An unknown error has occurred. Exiting...</code></pre><p>这种类似的错误已经不是第一次遇到了，一般，我会选择另辟一条<a href="http://tutorialforlinux.com/2014/01/29/how-to-install-hadoop-on-arch-linux-32-64-bit-linux-step-by-step-guide/" target="_blank" rel="external">道路</a>，这一次也一样！<br>首先，去<a href="http://hadoop.apache.org/releases.html" target="_blank" rel="external">官网</a><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-2.7.3/hadoop-2.7.3.tar.gz" target="_blank" rel="external">下载</a> hadoop-2.7.3 的 bin 文件。  </p><p>解压：</p><pre><code>$ cd ~/Download$ tar -xf hadoop-2.7.3.tar.gz</code></pre><p>安装：</p><pre><code>$ sudo cp -a hadoop-2.7.3 /usr/local$ cd /usr/local$ sudo ln -s hadoop-2.7.3 hadoop</code></pre><p>创建临时文件夹：</p><pre><code>$ mkdir /usr/local/hadoop/tmp</code></pre><p>修改文件权限：</p><pre><code>$ sudo chown -R root:root hadoop-2.7.3 </code></pre><p>编辑必要的配置文件：</p><pre><code>$ cd hadoop/etc/hadoop</code></pre><p>hadoop-env.sh</p><pre><code>$ sudo vim hadoop-env.sh######################在适当位置添加（实际上注释中会有提示）JAVA_HOME=/usr/lib/jvm/java-7-openjdk</code></pre><p>core-site.xml</p><pre><code>$ sudo vim core-site.xml ######################在适当位置添加适当代码使其如下：&lt;?xml version=”1.0″?&gt;&lt;?xml-stylesheet type=”text/xsl” href=”configuration.xsl”?&gt;&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;        &lt;value&gt;/usr/local/hadoop/tmp&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;fs.default.name&lt;/name&gt;        &lt;value&gt;hdfs://localhost:8020&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;</code></pre><p>hdfs-site.xml</p><pre><code>$ sudo vim hdfs-site.xml ######################在适当位置添加适当代码使其如下：&lt;?xml version=”1.0″?&gt;&lt;?xml-stylesheet type=”text/xsl” href=”configuration.xsl”?&gt;&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;dfs.replication&lt;/name&gt;        &lt;value&gt;1&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;!-- specify this so that running ‘hadoop namenode -format’        formats the right dir --&gt;        &lt;name&gt;dfs.name.dir&lt;/name&gt;        &lt;value&gt;/usr/local/hadoop/cache/hadoop/dfs/name&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;</code></pre><p>mapred-site.xml</p><pre><code>$ sudo vim mapred-site.xml ######################在适当位置添加适当代码使其如下：&lt;?xml version=”1.0″?&gt;&lt;?xml-stylesheet type=”text/xsl” href=”configuration.xsl”?&gt;&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;mapred.job.tracker&lt;/name&gt;        &lt;value&gt;localhost:8021&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;</code></pre><p>添加全局变量，编辑 .bashrc</p><pre><code>$ vim ~/.bashrc ######################在后面添加：HADOOP_HOME=/usr/local/hadoopexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</code></pre><p>使新的 .bashrc 生效</p><pre><code>$ source ~/.bashrc </code></pre><hr><h1 id="3-安装-Spark"><a href="#3-安装-Spark" class="headerlink" title="3 安装 Spark"></a>3 安装 Spark</h1><p>去<a href="http://spark.apache.org/downloads.html" target="_blank" rel="external">官网</a><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-2.1.0/spark-2.1.0-bin-hadoop2.7.tgz" target="_blank" rel="external">下载</a>安装包。<br><strong>注：</strong>如果不想忍受巨慢下载速度，在下载之前记得把 Choose a download type 设置为 Select Apache Mirror。然后点击下载链接后选择你所在地区较快的镜像（ps：我选的是清华的，下载速度挺给力）。<br>Spark 的安装方法与 Hadoop 类似。首先，解压：</p><pre><code>$ cd ~/Download$ tar -xf spark-2.1.0-bin-hadoop2.7.tgz</code></pre><p>安装：</p><pre><code>$ sudo cp -a spark-2.1.0-bin-hadoop2.7 /usr/local$ cd /usr/local$ sudo ln -s spark-2.1.0-bin-hadoop2.7 spark</code></pre><p>修改文件权限：</p><pre><code>$ sudo chown -R root:root spark-2.1.0-bin-hadoop2.7 </code></pre><p>编辑必要的配置文件：</p><pre><code>$ cd /usr/local/spark/conf$ sudo cp spark-env.sh.template spark-env.sh $ sudo vim spark-env.sh#######################在末尾添加：export SPARK_DIST_CLASSPATH=$(/usr/local/hadoop/bin/hadoop classpath)</code></pre><p>添加全局变量，编辑 .bashrc</p><pre><code>$ vim ~/.bashrc ######################在后面添加：SPARK_HOME=/usr/local/sparkexport PATH=$PATH:$SPARK_HOME/bin</code></pre><p>使新的 .bashrc 生效</p><pre><code>$ source ~/.bashrc</code></pre><p>最后，测试下 Spark 是否能正常工作</p><pre><code>$ cd /usr/local/spark/examples/src/main/java/org/apache/spark/examples$ run-example SparkPi 2&gt;&amp;1 | grep &quot;Pi is roughly&quot;-------------------------Pi is roughly 3.14514</code></pre><p>搞定！</p><p><strong>最详细的 Spark 学习资料请访问<a href="http://spark.apache.org/docs/latest/programming-guide.html" target="_blank" rel="external">这里</a>。</strong></p><hr><h1 id="4-安装-Scala"><a href="#4-安装-Scala" class="headerlink" title="4 安装 Scala"></a>4 安装 Scala</h1><p>去<a href="http://www.scala-lang.org/download/" target="_blank" rel="external">官网</a>下载 bin 包。<br>解压：</p><pre><code>$ cd ~/Download$ tar -xf scala-2.11.8.tgz</code></pre><p>安装：</p><pre><code>$ sudo cp -a scala-2.11.8 /usr/local$ cd /usr/local$ sudo ln -s scala-2.11.8 scala</code></pre><p>修改文件权限：</p><pre><code>$ sudo chown -R root:root scala-2.11.8 </code></pre><p>添加全局变量，编辑 .bashrc</p><pre><code>$ vim ~/.bashrc ######################在后面添加：SCALA_HOME=/usr/local/scalaexport PATH=$PATH:$SCALA_HOME/bin</code></pre><p>使新的 .bashrc 生效</p><pre><code>$ source ~/.bashrc</code></pre><p>检验是否能正常工作，简单点，那就写个初学必会的 HelloWorld 吧！<br>由于上一步已经设置全局变量了，因此在任意目录下，能直接进入 scala 交互 shell：  </p><pre><code>$ scala </code></pre><p>HelloWorld 的实现如下所示：</p><p><img src="http://ocob25qxv.bkt.clouddn.com/17-1-14/74309323-file_1484394529870_1809b.png" alt=""></p><p>成功！</p><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="http://tutorialforlinux.com/2014/01/29/how-to-install-hadoop-on-arch-linux-32-64-bit-linux-step-by-step-guide/" target="_blank" rel="external">Install Hadoop 2.X for Arch Linux</a><br><strong>【２】</strong><a href="http://www.powerxing.com/spark-quick-start-guide/" target="_blank" rel="external">Spark快速入门指南 – Spark安装与基础使用</a><br><strong>【３】</strong><a href="http://spark.apache.org/docs/latest/programming-guide.html" target="_blank" rel="external">Spark Programming Guide</a><br><strong>【４】</strong><a href="https://www.scala-lang.org/documentation/getting-started.html" target="_blank" rel="external">getting-started</a></p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 1 月 13 日 </p>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> Hadoop </tag>
            
            <tag> JDK </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux 系统的有线＆无线连接</title>
      <link href="//posts/9d3eead8/"/>
      <url>//posts/9d3eead8/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>archlinux 下的 wifi 连接，一直是一个想要解决又懒得去碰的问题。<br>一是电脑放在工作室，这里的网线充足，有线快，可以很好的满足我的需求；二来，总觉得网络是个很高深的东西，算是从心底里有种畏惧吧。<br>现在，临近寒假了，想在回家之前把这个问题解决掉。不巧，正好有两个朋友想玩 linux ，我帮他们装了 ubuntu 16.04 ，有线能识别，但是识别不了 wifi ，通过 <a href="http://forum.ubuntu.org.cn/viewtopic.php?f=116&amp;t=481394" target="_blank" rel="external">google</a> ，原来是 BIOS 的设置问题，这种无法解释的事情，我觉得有必要记下来……</p><a id="more"></a><hr><h1 id="1-有线连接"><a href="#1-有线连接" class="headerlink" title="1 有线连接"></a>1 有线连接</h1><h2 id="1-1-ubuntu"><a href="#1-1-ubuntu" class="headerlink" title="1.1 ubuntu"></a>1.1 ubuntu</h2><p>在生活中遇到最多的就是动态分配的路由器了吧！<br>如果想要开机自动连接这类路由器，需要修改网络配置文件——</p><pre><code>$ sudo vim /etc/network/interfaces</code></pre><p>添加如下内容：</p><pre><code>$ auto eth0$ iface eth0 inet dhcp</code></pre><p>至于这里的 eth0 ，只不过是网卡名称的代名词。要具体情况具体定（ ps: 像我的就是enp7s0 ）。<br>一般驱动是自动装好的，执行如下命令可以查看本机的 eth0：</p><pre><code>$ ifconfig -a</code></pre><h2 id="1-2-archlinux"><a href="#1-2-archlinux" class="headerlink" title="1.2 archlinux"></a>1.2 archlinux</h2><p>同样是连接动态分配 ip 的路由器，命令行如下：</p><pre><code>$ sudo ip link set enp7s0 up$ sudo dhcpcd enp7s0</code></pre><p>每次开机都要手动输入很不方便，那就加入<a href="https://www.yumao.name/read/archlinux-systemd-rc-local/" target="_blank" rel="external"><strong>开机自启</strong></a>吧!</p><p>新建 rc-local.service</p><pre><code>$ sudo vim /usr/lib/systemd/system/rc-local.service</code></pre><p>写入以下内容：</p><pre><code>[Unit]Description=/etc/rc.local CompatibilityConditionPathExists=/etc/rc.local[Service]Type=forkingExecStart=/etc/rc.localTimeoutSec=0StandardOutput=ttyRemainAfterExit=yesSysVStartPriority=99[Install]WantedBy=multi-user.target</code></pre><p>然后新建 rc.local </p><pre><code>$ sudo vim /etc/rc.local </code></pre><p>写入：    </p><pre><code>#!/bin/baship link set enp7s0 updhcpcd enp7s0</code></pre><p>保存之后将其权限设置为可执行</p><pre><code>$ sudo chmod +x /etc/rc.local </code></pre><p>最后使用systemctl开机自启动此service</p><pre><code>$ sudo systemctl enable rc-local.service</code></pre><p>重启后发现能自动连网了！</p><hr><h1 id="2-无线连接"><a href="#2-无线连接" class="headerlink" title="2 无线连接"></a>2 无线连接</h1><h2 id="2-1-ubuntu"><a href="#2-1-ubuntu" class="headerlink" title="2.1 ubuntu"></a>2.1 ubuntu</h2><p>这个在前言里面已经提到过了，修改 BIOS 的 secure boot 为 disable即可自动识别。  </p><h2 id="2-2-archlinux"><a href="#2-2-archlinux" class="headerlink" title="2.2 archlinux"></a>2.2 archlinux</h2><p>先列出网络适配器型号</p><pre><code>$ lspci -k | grep -A 2 -i network---------------------------06:00.0 Network controller: Broadcom Limited BCM43142 802.11b/g/n (rev 01)Subsystem: Dell Wireless 1704 802.11n + BT 4.0Kernel driver in use: wl</code></pre><p>iwconfig 只输出 lo 和 enp7s0 ，<br>而 iw dev 无输出，显然是驱动没装好，google 好久，看了网上对博通网卡驱动的各种吐槽，快要放弃的时候，看到了这篇<a href="http://www.itdadao.com/articles/c15a466909p0.html" target="_blank" rel="external">文章</a>，真是救命草啊！</p><pre><code>$ sudo yaourt -S broadcom-wl-dkms</code></pre><p>reboot 重启后，再 iw dev 就发现有 wlp6s0 了。</p><pre><code>$ iw dev---------------------------lo        no wireless extensions.enp7s0    no wireless extensions.wlp6s0    IEEE 802.11  ESSID:off/any        Mode:Managed  Access Point: Not-Associated         Retry short limit:7   RTS thr:off   Fragment thr:off      Power Management:off</code></pre><p>首先，安装必要软件包</p><pre><code>$ sudo pacman -S wireless_tools$ sudo pacman -S wpa_supplicant$ sudo pacman -S netctl</code></pre><p>启用 wlp6s0 </p><pre><code>$ sudo ip link set wlp6s0 up</code></pre><p>扫描可用热点</p><pre><code>$ sudo iw dev wlp6s0 scan</code></pre><p>查看 wifi 的加密方式，根据不同方式采取不同措施。<br>其中加密方式为 WPA-PSK 用 wpa_supplicant；加密方式为 WEP 用 iw dev wlan0 connect your_essid key d:2:your_key 形式。<br>这里，用 netctl 工具来管理网络。<br>自动在 /etc/netctl/ 中生成配置文件：</p><pre><code>$ sudo wifi-menu -o</code></pre><p>在创建好配置文件之后，可以尝试运行（仅需写出文件名，不包含完整路径）：</p><pre><code>$ sudo netctl start profile</code></pre><p>iwconfig 即可看到已连上 wifi。</p><hr><h1 id="3-通过手机-USB-给电脑共享网络"><a href="#3-通过手机-USB-给电脑共享网络" class="headerlink" title="3 通过手机 USB 给电脑共享网络"></a>3 通过手机 USB 给电脑共享网络</h1><p>你是否遇到过这样的窘境，既找不到有线网也搜不到无线网，手机成了与外界沟通的唯一方式。<br>毕竟有些事情，用手机也不方便，比如刷 ACM ……<br>这个时候，你肯定会想到通过 USB 将网络共享给电脑吧！在 windows 10 下简单地将手机连上就能上网，同样，在 linux 下也只需要那么一两步就能让你“重见天日”！<br>如果你的电脑是 linux ，如果你的手机支持 USB 共享网络，那么下面将是你迫不及待想看到的——<br><strong>第一步：</strong>将你的手机通过 usb 线连接到电脑上，紧接着打开手机的 usb 共享网络开关。如果你要问具体怎么打开的话，还是去百度一下或者翻翻说明书，实在不行就给客服打电话，哈哈！<br><strong>第二步：</strong>查看手机热点在你电脑上得到的“专属名称”。  </p><pre><code>$ iwconfig-----------------------lo        no wireless extensions.enp0s29u1u3  no wireless extensions.enp7s0    no wireless extensions.wlp6s0    IEEE 802.11  ESSID:off/any        Mode:Managed  Access Point: Not-Associated         Retry short limit:7   RTS thr:off   Fragment thr:off      Power Management:off</code></pre><p>很明显，我的多出了 enp0s29u1u3 ，这个就是手机热点对应的设备名称啦！<br><strong>第三步：</strong>接下来的步骤就类似于上面提到的有线 dhcp 连接方式了。  </p><pre><code>$ sudo ip link set enp0s29u1u3 up$ sudo dhcpcd enp0s29u1u3  </code></pre><p>最后，检验下是否真的能上网了！  </p><pre><code>$ ping -c 3 baidu.com </code></pre><p>能成功返回数据就表示已连上网！</p><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="http://forum.ubuntu.org.cn/viewtopic.php?f=116&amp;t=481394" target="_blank" rel="external">ubuntu14.04 网卡BCM43142 make网卡驱动的候出现如下问题</a><br><strong>【２】</strong><a href="https://www.yumao.name/read/archlinux-systemd-rc-local/" target="_blank" rel="external">ArchLinux Systemd 增加rc-local自运行</a><br><strong>【３】</strong><a href="http://www.itdadao.com/articles/c15a466909p0.html" target="_blank" rel="external">archlinux配置BCM43142无线网卡</a></p><hr><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2017 年 1 月 7 日 </p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> archlinux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> wifi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>重装 Linux 后的 Hexo 博客环境恢复</title>
      <link href="//posts/895fff49/"/>
      <url>//posts/895fff49/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>由于本人之前已经在 windows 和 ubuntu 平台搭好过本地写 blog 平台，有全部文件备份。故本博文没有涉及到 github 账号申请和 Hexo 建站等流程。<br>此博文仅仅是在新系统上的重新布置，和本人情况类似的游客下文可做一定参考，也劳烦 没有文件备份的游客移步他家。</p><a id="more"></a><hr><p><strong>环境：</strong></p><blockquote><ul><li>os : Linux 4.8.10-1-ARCH linux x64</li><li>git : 2.10.2</li><li>node : 7.2.0</li><li>npm : 4.0.2</li><li>hexo-cli : 1.0.2</li></ul></blockquote><hr><h1 id="1-关联github"><a href="#1-关联github" class="headerlink" title="1 关联github"></a>1 关联github</h1><h2 id="1-1-设置git"><a href="#1-1-设置git" class="headerlink" title="1.1 设置git"></a>1.1 设置git</h2><p>系统中 git 已默认安装，设置 git 用户名称和邮件地址：</p><pre><code>$ git config --global user.name &quot;username&quot;$ git config --global user.email &quot;username@example.com&quot;</code></pre><h2 id="1-2-配置git私钥"><a href="#1-2-配置git私钥" class="headerlink" title="1.2 配置git私钥"></a>1.2 配置git私钥</h2><p>安装 openssh</p><pre><code>$ sudo pacman -S openssh</code></pre><p>生成 SSH key</p><pre><code>$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></pre><p>首先确保 ssh-agent 可运行：</p><pre><code>$ ssh-agent -s</code></pre><p>然后添加SSH key：</p><pre><code>$ ssh-add ~/.ssh/id_rsa</code></pre><p>拷贝 ~/.ssh/id_rsa.pub 中的内容，然后，在 GitHub 右上方点击头像，选择 ”Settings”，在右边的 ”Personal settings” 侧边栏选择 ”SSH Keys”。点击 ”Add key” 按钮添加，接着粘贴 key。</p><p>测试：</p><pre><code>$ ssh -T git@github.com</code></pre><hr><h1 id="2-安装node-js和Hexo"><a href="#2-安装node-js和Hexo" class="headerlink" title="2 安装node.js和Hexo"></a>2 安装node.js和Hexo</h1><h2 id="2-1-安装node-js"><a href="#2-1-安装node-js" class="headerlink" title="2.1 安装node.js"></a>2.1 安装node.js</h2><p><strong>法一：</strong><br>按照 <a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo 官方</a>给出的安装方法，通过 nvm 进行安装。<br>安装 nvm：</p><pre><code>$ curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh</code></pre><p>重启Terminal，安装 Node.js</p><pre><code>$ nvm ls-remote$ nvm install v7.2.0</code></pre><p>网太慢的原因？下载总出错……果断尝试法二。</p><p><strong>法二：</strong><br>按照 <a href="https://wiki.archlinux.org/index.php/Node.js_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">Arch wiki</a> 给出的安装方法。<br> nodejs 位于官方软件仓库，直接通过 pacman 安装：</p><pre><code>$ sudo pacman -S nodejs</code></pre><p> npm 同上：</p><pre><code>$ sudo pacman -S npm</code></pre><h2 id="2-2-安装Hexo"><a href="#2-2-安装Hexo" class="headerlink" title="2.2 安装Hexo"></a>2.2 安装Hexo</h2><p>使用 npm 完成 Hexo 的安装：</p><pre><code>$ sudo npm install -g hexo-cli      &lt;== 注：这里不用 sudo 会报错</code></pre><p>由于本人在之前已经备份过 myHexo 的全部文件，因此不必 hexo init 了。<br>接下来，直接进入移动硬盘里面的 blog 文件目录：</p><pre><code>$ hexo g$ hexo s                            &lt;== 本地 0.0.0.0:4000 预览$ hexo d                            &lt;== 部署至 github </code></pre><p>访问 0.0.0.0:4000 大功告成!</p><p><img src="http://ocob25qxv.bkt.clouddn.com/public/16-11-28/95566873.jpg" alt=""></p><hr><h1 id="3-绑定域名"><a href="#3-绑定域名" class="headerlink" title="3 绑定域名"></a>3 <a href="http://wanglongzhi.cn/blog/2016/11/29/1/" target="_blank" rel="external">绑定域名</a></h1><p>首先，进入博客根目录，执行：</p><pre><code>$ echo &apos;yourYuming&apos;&gt;source/CNAME</code></pre><p>然后，去域名管理网站进行解析，A 记录 IP 可选择 192.30.252.153。</p><hr><p><strong>参考资料：</strong><br><strong>【１】</strong><a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">GitHub Pages + Hexo搭建博客</a><br><strong>【２】</strong><a href="http://wanglongzhi.cn/blog/2016/11/29/1/" target="_blank" rel="external">博客搭建过程</a> </p><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2016 年 11 月 28 日 </p>]]></content>
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>撕人定制 ArchLinux（三）</title>
      <link href="//posts/ed0561c6/"/>
      <url>//posts/ed0561c6/</url>
      <content type="html"><![CDATA[<p>此博文继<a href="https://irislr.github.io/2016/11/27/%E6%92%95%E4%BA%BA%E5%AE%9A%E5%88%B6ArchLinux%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">撕人定制 ArchLinux（一）</a><a href="https://irislr.github.io/2016/11/27/%E6%92%95%E4%BA%BA%E5%AE%9A%E5%88%B6ArchLinux%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">撕人定制 ArchLinux（二）</a>后，介绍了 gnome 图形界面以及必要软件和驱动的安装。</p><a id="more"></a><hr><h1 id="1-gnome桌面安装"><a href="#1-gnome桌面安装" class="headerlink" title="1 gnome桌面安装"></a>1 gnome桌面安装</h1><h2 id="1-1-添加普通用户"><a href="#1-1-添加普通用户" class="headerlink" title="1.1 添加普通用户"></a>1.1 添加普通用户</h2><p>新安装的系统只有一个超级用户，即 root 。<br>添加名为 myUsername 普通用户：</p><pre><code># useradd myUsername</code></pre><p>并为所创建用户设定密码：</p><pre><code># passwd myUsername</code></pre><p>权限提升——安装sudo让普通用户执行root命令：</p><pre><code># pacman -S sudo# nano /etc/sudoers&lt;== 添加　myUsername ALL＝ALL(ALL)</code></pre><h2 id="1-2-连接网络"><a href="#1-2-连接网络" class="headerlink" title="1.2 连接网络"></a>1.2 连接网络</h2><p>连接 dhcp 有线网络：</p><pre><code>$ sudo ip link set enp7s0 up$ sudo dhcpcd enp7s0</code></pre><h2 id="1-3-安装基本的图形环境以及驱动程序"><a href="#1-3-安装基本的图形环境以及驱动程序" class="headerlink" title="1.3 安装基本的图形环境以及驱动程序"></a>1.3 安装基本的图形环境以及驱动程序</h2><p>安装xorg核心组件：</p><pre><code>$ sudo pacman -S xorg-server xorg-xinit xorg-utils xorg-server-utils</code></pre><p>安装开源显卡驱动，或者安装闭源驱动catalyst：</p><pre><code>$ sudo pacman -S xf86-video-ati</code></pre><p>安装触摸板驱动：</p><pre><code>$ sudo pacman -S xf86-input-synaptics</code></pre><h2 id="1-4-安装gnome桌面"><a href="#1-4-安装gnome桌面" class="headerlink" title="1.4 安装gnome桌面"></a>1.4 <a href="https://wiki.archlinux.org/index.php/GNOME_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E5.AE.89.E8.A3.85" target="_blank" rel="external">安装gnome桌面</a></h2><p>安装基本桌面环境和精选的应用程序：</p><pre><code>$ sudo pacman -S gnome</code></pre><p>安装剩余的可选工具：</p><pre><code>$ sudo pacman -S gnome-extra</code></pre><p>进入桌面：</p><pre><code>$ startx</code></pre><hr><h1 id="2-常用软件的安装"><a href="#2-常用软件的安装" class="headerlink" title="2 常用软件的安装"></a>2 常用软件的安装</h1><h2 id="2-1-yaourt"><a href="#2-1-yaourt" class="headerlink" title="2.1 yaourt"></a>2.1 yaourt</h2><p>在/etc/pacman.conf中添加软件仓库：</p><pre><code>$ sudo vim /etc/pacman.conf&lt;== 添加[ArchLinuxfr]SigLevel = Optional TrustAllServer = http://repo.ArchLinux.fr/$arch</code></pre><p>然后命令行中安装：</p><pre><code>$ sudo pacman -Sy yaourt</code></pre><p>使用yaourt来更新所有系统中的包：</p><pre><code>$ yaourt -Syua</code></pre><h2 id="2-2-fcitx中文输入法"><a href="#2-2-fcitx中文输入法" class="headerlink" title="2.2 fcitx中文输入法"></a>2.2 fcitx中文输入法</h2><p>安装fcitx输入法作为中文输入法：</p><pre><code>$ sudo pacman -S fcitx-im</code></pre><p>为保证fcitx能够正常在各个环境中使用，安装：</p><pre><code>$ sudo pacman -S fcitx-qt5</code></pre><p>安装AUR里的搜狗拼音输入法：</p><pre><code>$ sudo yaourt -S fcitx-sogoupinyin</code></pre><p>安装图形配置工具：</p><pre><code>$ sudo pacman -S fcitx-configtool</code></pre><p>设置开机自启，在.xinitrc文件中写入配置信息：</p><pre><code>$ sudo vim ~/.xinitrc&lt;== 添加export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=&quot;@im=fcitx&quot;    //让fcitx成为默认输入法</code></pre><h2 id="2-3-chromium"><a href="#2-3-chromium" class="headerlink" title="2.3 chromium"></a>2.3 chromium</h2><p>安装</p><pre><code>$ sudo pacman -S chromium</code></pre><p>为 chromium 安装 flash 插件</p><pre><code>$ sudo yaourt -S pepper-flash$ sudo yaourt -S chromium-widevine</code></pre><h2 id="2-4-sublime-text-3"><a href="#2-4-sublime-text-3" class="headerlink" title="2.4 sublime-text-3"></a>2.4 sublime-text-3</h2><p>安装</p><pre><code>$ sudo pacman -S sublime-text-dev</code></pre><p>无法输入中文的解决方案——下载必要的文件并复制到相应的目录：</p><pre><code>$ git clone https://github.com/lyfeyaj/sublime-text-imfix.git$ cd sublime-text-imfix$ sudo cp ./lib/libsublime-imfix.so /opt/sublime_text/$ sudo cp ./src/subl /usr/bin/</code></pre><p>在～下新建文件名为sublime</p><pre><code>$ vim sublime&lt;== 添加#!/bin/bashLD_PRELOAD=/opt/sublime_text/libsublime-imfix.so subl</code></pre><p>重新运行 sublime 就可以输入中文了</p><pre><code>$ bash ~/sublime</code></pre><p>以后都要用上面这条语句运行sublime </p><h2 id="2-5-VirtualBox"><a href="#2-5-VirtualBox" class="headerlink" title="2.5 VirtualBox"></a>2.5 <a href="https://wiki.archlinux.org/index.php/VirtualBox_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E5.9C.A8Archlinux.E4.B8.AD.E5.AE.89.E8.A3.85VirtualBox.E7.9A.84.E5.AE.89.E8.A3.85.E6.AD.A5.E9.AA.A4" target="_blank" rel="external">VirtualBox</a></h2><p><strong>安装：</strong><br>用 pacman 安装软件包 virtualbox：</p><pre><code>$ sudo pacman -S virtualbox</code></pre><p>选择 linux 内核模块获取方式，安装 virtualbox-host-modules-arch：</p><pre><code>$ sudo pacman -S virtualbox-host-modules-arch</code></pre><p>要使用基于 Qt 的图形界面：</p><pre><code>$ sudo pacman -S qt5-x11extras </code></pre><p>VirtualBox 在 Linux 上运行需要使用自己的内核模块，vboxdrv 模块必须在虚拟机运行前加载。<br>手动加载模块：</p><pre><code>$sudo modprobe vboxdrv</code></pre><p>运行　VirtualBox。</p><p><strong>优化 vbox 体验：</strong><br>装完 xp 虚拟机后，发现没有适应屏幕的分辨率，并且鼠标移动迟钝，<a href="http://www.ruanme.com/virtualbox-full-screen.html" target="_blank" rel="external">baidu</a> 后才知道是因为还没安装增强软件包～   </p><p><strong>step1：</strong>添加留空光驱<br>（１）关闭虚拟机，回到 VirtualBox 管理器中，然后选中你创建的虚拟机，右击点 <code>setting</code>。<br>（２）在弹出的虚拟机设置中，在左侧列表中找到 <code>storage</code> 选项。<br>（３）在右边存储树列表中，点击添加虚拟光驱。如图：红线圈中，光驱选择留空就行了。</p><p><strong>step2：</strong>安装增强软件包<br>打开虚拟机，点击 <code>Device</code> -&gt; <code>Insert Guest Additions CD image</code>。<br>vBox 会自动将增强包挂载到虚拟机的光驱上，双击安装即可。</p><p><strong>step3：</strong>添加共享文件夹<br>这个很简单。创建完共享文件夹后，虚拟机 xp 端通过 <code>我的电脑</code> -&gt; <code>映射网络驱动器</code> 进行访问。  </p><h2 id="2-6-Matlab-R2016a"><a href="#2-6-Matlab-R2016a" class="headerlink" title="2.6 Matlab R2016a"></a>2.6 Matlab R2016a</h2><p>按照网上的<a href="http://blog.csdn.net/jnulzl/article/details/51779342" target="_blank" rel="external">教程</a>一路安装下来，没啥问题，但是 ./matlab 启动的时候报错了，错误截图如下 ==&gt;<br><img src="http://ocob25qxv.bkt.clouddn.com/public/16-11-30/94273451.jpg" alt=""></p><p>所幸 google 后找到<a href="https://forum.antergos.com/topic/5074/matlab-r2016a-and-antergos" target="_blank" rel="external">解决办法</a></p><pre><code>$ sudo ln -s /usr/lib/libncursesw.so.6  /usr/local/MATLAB/R2016a/bin/glnxa64/libncurses.so.5</code></pre><p>再执行 ./matlab 的时候会提示选择许可文件激活，但是报错了 ==&gt;  </p><p><img src="http://ocob25qxv.bkt.clouddn.com/public/16-11-30/95996939.jpg" alt=""></p><p>从错误可以很明显看出是权限问题，于是 sudo ./matlab<br>许可文件位置选 /usr/local/MATLAB/R2016a/bin/licenses<br>搞定！  </p><p>最后，设置命令行任意位置启动matlab：  </p><pre><code>$ sudo ln -s /usr/local/MATLAB/R2016a/bin/matlab   /usr/local/bin/matlab</code></pre><p>接下来还需要解决：<br><a href="http://blog.csdn.net/hcx25909/article/details/7560675" target="_blank" rel="external">中文乱码的解决</a><br><a href="http://www.ilovematlab.cn/thread-114298-1-1.html" target="_blank" rel="external">不能输入中文的问题</a></p><h2 id="2-7-wps-office"><a href="#2-7-wps-office" class="headerlink" title="2.7 wps-office"></a>2.7 <a href="https://wiki.archlinux.org/index.php/WPS_Office_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">wps-office</a></h2><pre><code>$ sudo yaourt -S wps-office</code></pre><h2 id="2-8-中文乱码问题"><a href="#2-8-中文乱码问题" class="headerlink" title="2.8 中文乱码问题"></a>2.8 <a href="https://wiki.archlinux.org/index.php/Arch_Linux_Localization_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E5.9F.BA.E6.9C.AC.E4.B8.AD.E6.96.87.E6.94.AF.E6.8C.81" target="_blank" rel="external">中文乱码问题</a></h2><hr><p><strong>参考资料：</strong><br><strong>【１】</strong>   <a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">ArchLinux官方教程</a><br><strong>【２】</strong>   <a href="http://blog.csdn.net/u011152627/article/details/18925121" target="_blank" rel="external">寒假折腾Archlinux的一些经验（新手向）–桌面配置篇</a><br><strong>【３】</strong>   <a href="http://www.ruanme.com/virtualbox-full-screen.html" target="_blank" rel="external">如何设置 Oracle VM VirtualBox 虚拟机全屏</a><br><strong>【４】</strong>   <a href="http://blog.csdn.net/jnulzl/article/details/51779342" target="_blank" rel="external">Ubuntu 16.04下安装MATLAB R2016a</a></p><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2016 年 11 月 27 日 </p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> 系统安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>撕人定制 ArchLinux（二）</title>
      <link href="//posts/a01bc294/"/>
      <url>//posts/a01bc294/</url>
      <content type="html"><![CDATA[<p>此博文继<a href="https://irislr.github.io/2016/11/27/%E6%92%95%E4%BA%BA%E5%AE%9A%E5%88%B6ArchLinux%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">撕人定制 ArchLinux（一）</a>后，主要介绍了安装基本系统的具体过程。<br><a id="more"></a></p><h1 id="1-安装及基本配置"><a href="#1-安装及基本配置" class="headerlink" title="1 安装及基本配置"></a>1 安装及基本配置</h1><h2 id="1-1-选择镜像"><a href="#1-1-选择镜像" class="headerlink" title="1.1 选择镜像"></a>1.1 选择镜像</h2><p>编辑 /etc/pacman.d/mirrorlist  </p><pre><code># nano /etc/pacman.d/mirrorlist</code></pre><p>选择中国的镜像。</p><h2 id="1-2-安装基本系统"><a href="#1-2-安装基本系统" class="headerlink" title="1.2 安装基本系统"></a>1.2 安装基本系统</h2><p>执行 pacstrap 脚本，默认会安装 base 组：</p><pre><code># pacstrap /mnt</code></pre><p>如果你想通过 AUR 或者 ABS 编译安装软件包,需要装上 base-devel：</p><pre><code># pacstrap -i /mnt base base-devel</code></pre><p>安装完成后会提示 ==&gt; Image creation successful.</p><h2 id="1-3-基本配置"><a href="#1-3-基本配置" class="headerlink" title="1.3 基本配置"></a>1.3 基本配置</h2><h3 id="1-3-1-Fstab"><a href="#1-3-1-Fstab" class="headerlink" title="1.3.1 Fstab"></a>1.3.1 Fstab</h3><p>用以下命令生成 fstab 文件 (用 -U 或 -L 选项设置 UUID 或卷标)：</p><pre><code># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></pre><h3 id="1-3-2-Chroot"><a href="#1-3-2-Chroot" class="headerlink" title="1.3.2 Chroot"></a>1.3.2 Chroot</h3><p>Change root 到新安装的系统：</p><pre><code># arch-chroot /mnt /bin/bash</code></pre><h3 id="1-3-3-时区"><a href="#1-3-3-时区" class="headerlink" title="1.3.3 时区"></a>1.3.3 时区</h3><p>设置时区:</p><pre><code># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre><p>调整时间漂移:</p><pre><code># hwclock --systohc --utc</code></pre><h3 id="1-3-4-Locale"><a href="#1-3-4-Locale" class="headerlink" title="1.3.4 Locale"></a>1.3.4 Locale</h3><p>本地化的程序与库若要本地化文本，都依赖 Locale, 后者明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准等等。在下面两个文件设置：locale.gen 与 locale.conf.<br>/etc/locale.gen 是一个仅包含注释文档的文本文件。指定需要的本地化类型，只需移除对应行前面的注释符号（＃）即可，建议选择帶UTF-8的項：</p><pre><code># nano /etc/locale.genen_US.UTF-8 UTF-8zh_CN.UTF-8 UTF-8</code></pre><p>接着执行locale-gen以生成locale讯息：</p><pre><code># locale-gen</code></pre><p>/etc/locale.gen 生成指定的本地化文件，每次 glibc 更新之后也要运行 locale-gen。<br>创建 locale.conf 并提交你的本地化选项：</p><h3 id="1-3-5-主机名"><a href="#1-3-5-主机名" class="headerlink" title="1.3.5 主机名"></a>1.3.5 主机名</h3><p>要设置 hostname，将其添加 到 /etc/hostname, myhostname 是需要的主机名:</p><pre><code># echo myhostname &gt; /etc/hostname</code></pre><h3 id="1-3-6-Root-密码"><a href="#1-3-6-Root-密码" class="headerlink" title="1.3.6 Root 密码"></a>1.3.6 Root 密码</h3><p>设置 root 密码:</p><pre><code># passwd</code></pre><h3 id="1-3-7-安装引导程序"><a href="#1-3-7-安装引导程序" class="headerlink" title="1.3.7 安装引导程序"></a>1.3.7 安装引导程序</h3><p>安装软件包 grub 和 efibootmgr：</p><pre><code># pacman -S grub# pacman -S efibootmgr</code></pre><p>接下来的步骤安装 GRUB UEFI 程序到 esp/EFI/grub中, 安装其模块到/boot/grub/x86_64-efi，我这里下面的 $esp 为 /boot/EFI</p><pre><code># grub-install --target=x86_64-efi --efi-directory=$esp --bootloader-id=grub</code></pre><p>然后将可以启动的 grubx64.efi 复制到 $esp/EFI/grub.</p><pre><code># cp grubx64.efi $esp/EFI/grub</code></pre><p>安装后,需要生成主配置文件 grub.cfg。配置文件的生成过程受到 /etc/default/grub 和 /etc/grub.d/ 下脚本的影响。<br>使用下面命令生成 grub.cfg:</p><pre><code># grub-mkconfig -o /boot/grub/grub.cfg</code></pre><p>每次修改 /etc/default/grub 后，都需要重新生成主配置文件</p><h3 id="1-3-8-重启"><a href="#1-3-8-重启" class="headerlink" title="1.3.8 重启"></a>1.3.8 重启</h3><p>输入 exit 或按 Ctrl+D 退出 chroot。<br>现在重启系统，移除安装介质并执行 reboot，新系统启动后用 root 登录。</p><hr><p><strong>参考资料：</strong><br><strong>【１】</strong>   <a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">ArchLinux官方教程</a>  </p><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2016 年 11 月 27 日 </p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> 系统安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>撕人定制 ArchLinux（一）</title>
      <link href="//posts/900d2e4c/"/>
      <url>//posts/900d2e4c/</url>
      <content type="html"><![CDATA[<p>此博文主要介绍了安装前需要进行的一系列准备工作。<br><a id="more"></a></p><p><strong>前言:</strong><br>我的第一台爱本——灵越3543，是2015年初入手的。下面来回顾下我的”光荣“折腾史……</p><blockquote><ul><li>2015.2-3：win8.1（电脑自带）</li><li>2015.4-11：win7（虚拟机里体验过各种 ubuntu ， centOS ， openSUSE 等等）</li><li>2015.12-2016.5：win7 + ubuntu15.10（刚装完的时候经常进 ubuntu ，实际上一个月以后每次都是直接进 win ）</li><li>2016.5-6的某些天：win10（想体现下 win10 ，也仅仅只是体验下……）</li><li>2016.6-7：centOS7.1（为配置自己的 mcm 工作环境，折腾了不止一点两点额）</li><li>2016.8-11：ubuntu16.04（唯一感觉是比 centOS 舒服许多）</li><li>2016.11.14-22：win10（双11入手的固态刚到，准备老老实实滚回 win ，却因为某软件问题开机蓝屏进不了系统而放弃治疗……）</li><li>2016.11.25：archlinux（你的我一直在寻找的吗？）</li></ul></blockquote><p>先来爆下料呗，哈哈，以下是现在博主爱本startx之后的样子～ </p><p><img src="http://ocob25qxv.bkt.clouddn.com/public/16-11-26/99662440.jpg" alt="">  </p><p>另外，如果想按自己的喜好撕人定制，<strong>强烈建议移步 ArchLinux WiKi 的<a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">安装指导</a>！</strong><br>实际上，本博文的绝大部分内容也是参考此 wiki 。  </p><p>接下来，格好删除你的C盘，跟我一起来吧！  </p><hr><p><strong>准备:</strong></p><blockquote><ul><li>普通U盘一个  </li><li><a href="https://www.archlinux.org/download/" target="_blank" rel="external">ArchLinux 镜像</a> </li><li>电脑一台</li></ul></blockquote><hr><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h1><h2 id="1-1-制作启动盘"><a href="#1-1-制作启动盘" class="headerlink" title="1.1 制作启动盘"></a>1.1 制作启动盘</h2><p> windows 下面，下载启动盘制作工具 <a href="https://rufus.akeo.ie/" target="_blank" rel="external">rufus</a>，将镜像写入U盘，<strong>注意</strong>制作过程中会格式化，记得备份。<br>在此安利下， rufus 真的是一个很给力的工具，目前为止，本人装过的所有 Linux 系统都是用它做的启动盘。</p><h2 id="1-2-设置UEFI模式"><a href="#1-2-设置UEFI模式" class="headerlink" title="1.2 设置UEFI模式"></a>1.2 设置UEFI模式</h2><p>不同电脑有所不同，具体步骤自行 baidu 吧。<br>下面的步骤都是基于的 UEFI 模式的。实际上， BIOS 和 UEFI 两种模式的安装步骤中也仅仅只是分区和安装引导程序的过程有稍许不同。<br>选择 UEFI 的原因？唔……本人认为 UEFI 是趋势吧。　　</p><h2 id="1-3-在硬盘里留出30G以上的空闲空间"><a href="#1-3-在硬盘里留出30G以上的空闲空间" class="headerlink" title="1.3 在硬盘里留出30G以上的空闲空间"></a>1.3 在硬盘里留出30G以上的空闲空间</h2><p>如果以前装的是 windows ，现在准备装双系统了，那么就进磁盘管理选择一个盘进行删除卷操作。<br>如果以前装的是 windows ，现在准备装 ArchLinux 单系统了，那么直接进大白菜删除所有分区。<br>如果以前装的是 linux ，那就跳过这步吧……</p><hr><h1 id="2-为正式安装做好铺垫"><a href="#2-为正式安装做好铺垫" class="headerlink" title="2 为正式安装做好铺垫　　"></a>2 为正式安装做好铺垫　　</h1><h2 id="2-1-进入-ArchISO"><a href="#2-1-进入-ArchISO" class="headerlink" title="2.1 进入 ArchISO"></a>2.1 进入 ArchISO</h2><p>开机前将U盘插入，设置成从U盘启动。<br>开机能看到 ArchISO 的选择界面，一般选第一个就行，默认装64位。 想装32位就选第二个。<br>进去以后即默认获取 root 权限。</p><h2 id="2-2-验证启动模式"><a href="#2-2-验证启动模式" class="headerlink" title="2.2 验证启动模式"></a>2.2 验证启动模式</h2><p>如果 UEFI 模式已经启用 , Archiso 将会使用 systemd-boot 来启动 Arch Linux 。如果你要验证启动模式, 可以尝试列出 efivars 目录:</p><pre><code># ls /sys/firmware/efi/efivars</code></pre><p>如果出现 No such file or directory 的提示，则需要重新开机检查设置。</p><h2 id="2-3-连接到因特网"><a href="#2-3-连接到因特网" class="headerlink" title="2.3 连接到因特网"></a>2.3 连接到因特网</h2><p>守护进程 dhcpcd 已被默认启用来探测有线设备, 并会尝试连接。因此最省事的方法就是找个路由器设置为 dhcp 的地方。<br>如需验证网络是否正常, 可以使用 ping:</p><pre><code># ping -c 3 baidu.com</code></pre><h2 id="2-4-更新系统时间"><a href="#2-4-更新系统时间" class="headerlink" title="2.4 更新系统时间"></a>2.4 更新系统时间</h2><p>用 systemd-timesyncd 确保系统时间是正确的：</p><pre><code># timedatectl set-ntp true</code></pre><h2 id="2-5-硬盘分区"><a href="#2-5-硬盘分区" class="headerlink" title="2.5 硬盘分区"></a>2.5 硬盘分区</h2><p>找到你的硬盘名称，我的固态显示为 /dev/sdb：</p><pre><code># fdisk -l</code></pre><p>下面使用 parted 工具进行分区，四个分区依次为 /boot/EFI , / , swap , /home：</p><pre><code># parted /dev/sdb(parted) mkpart p 0 512M        &lt;== /boot/EFI(parted) mkpart p 512M 40G      &lt;== /(parted) mkpart p 40G 48G       &lt;== swap(parted) mkpart e 48G -1        &lt;== /home</code></pre><p>接下来，还需要用合适的文件系统来对每个分区进行格式化操作：</p><pre><code># mkfs.vfat sdb1                &lt;== /boot/EFI# mkfs.ext4 sdb2                &lt;== /# mkswap sdb3                   &lt;== swap# mkfs.ext4 sdb4                &lt;== home</code></pre><h2 id="2-6-挂载分区"><a href="#2-6-挂载分区" class="headerlink" title="2.6 挂载分区"></a>2.6 挂载分区</h2><p>首先将根分区挂载到 /mnt：</p><pre><code># mount /dev/sdb2 /mnt</code></pre><p>创建目录并挂载 /boot/EFI：</p><pre><code># mkdir /mnt/boot# mkdir /mnt/boot/EFI# mount /dev/sdb1 /mnt/boot/EFI</code></pre><p>创建目录并挂载 /home：</p><pre><code># mkdir /mnt/home# mount /dev/sdb4 /mnt/home</code></pre><p>激活 sdb3 作为交换分区：</p><pre><code># swapon /dev/sdb3</code></pre><hr><p><strong>参考资料：</strong><br><strong>【１】</strong>   <a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">ArchLinux官方教程</a>  </p><p>作者 <a href="http://irislr.github.io" target="_blank" rel="external">@Iris</a><br>2016 年 11 月 27 日 </p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> 系统安装 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[<p>layout: categories<br>comments: false</p>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>layout: about<br>comments: true<br>reward: false</p>]]></content>
    </entry>
    
    <entry>
      <title>读书</title>
      <link href="/reading/index.html"/>
      <url>/reading/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[<p>layout: tags<br>comments: false</p>]]></content>
    </entry>
    
  
</search>
